/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestfulCalendarV4
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T23:02:59.563495701+01:00[Europe/Berlin]")
public class RestfulCalendarV4 {
  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private Integer background;

  public static final String SERIALIZED_NAME_CLOUD_HOST = "cloudHost";
  @SerializedName(SERIALIZED_NAME_CLOUD_HOST)
  private java.lang.String cloudHost;

  public static final String SERIALIZED_NAME_CLOUD_PATH = "cloudPath";
  @SerializedName(SERIALIZED_NAME_CLOUD_PATH)
  private java.lang.String cloudPath;

  public static final String SERIALIZED_NAME_CLOUD_PORT = "cloudPort";
  @SerializedName(SERIALIZED_NAME_CLOUD_PORT)
  private Integer cloudPort;

  public static final String SERIALIZED_NAME_CLOUD_SSL = "cloudSsl";
  @SerializedName(SERIALIZED_NAME_CLOUD_SSL)
  private Boolean cloudSsl;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private java.lang.String displayName;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private java.lang.String eventType;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private java.lang.String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private java.lang.String id;

  public RestfulCalendarV4() {
  }

  public RestfulCalendarV4 background(Integer background) {
    
    this.background = background;
    return this;
  }

   /**
   * Get background
   * @return background
  **/
  @javax.annotation.Nullable
  public Integer getBackground() {
    return background;
  }


  public void setBackground(Integer background) {
    this.background = background;
  }


  public RestfulCalendarV4 cloudHost(java.lang.String cloudHost) {
    
    this.cloudHost = cloudHost;
    return this;
  }

   /**
   * Get cloudHost
   * @return cloudHost
  **/
  @javax.annotation.Nullable
  public java.lang.String getCloudHost() {
    return cloudHost;
  }


  public void setCloudHost(java.lang.String cloudHost) {
    this.cloudHost = cloudHost;
  }


  public RestfulCalendarV4 cloudPath(java.lang.String cloudPath) {
    
    this.cloudPath = cloudPath;
    return this;
  }

   /**
   * Get cloudPath
   * @return cloudPath
  **/
  @javax.annotation.Nullable
  public java.lang.String getCloudPath() {
    return cloudPath;
  }


  public void setCloudPath(java.lang.String cloudPath) {
    this.cloudPath = cloudPath;
  }


  public RestfulCalendarV4 cloudPort(Integer cloudPort) {
    
    this.cloudPort = cloudPort;
    return this;
  }

   /**
   * Get cloudPort
   * @return cloudPort
  **/
  @javax.annotation.Nullable
  public Integer getCloudPort() {
    return cloudPort;
  }


  public void setCloudPort(Integer cloudPort) {
    this.cloudPort = cloudPort;
  }


  public RestfulCalendarV4 cloudSsl(Boolean cloudSsl) {
    
    this.cloudSsl = cloudSsl;
    return this;
  }

   /**
   * Get cloudSsl
   * @return cloudSsl
  **/
  @javax.annotation.Nullable
  public Boolean getCloudSsl() {
    return cloudSsl;
  }


  public void setCloudSsl(Boolean cloudSsl) {
    this.cloudSsl = cloudSsl;
  }


  public RestfulCalendarV4 displayName(java.lang.String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public java.lang.String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
  }


  public RestfulCalendarV4 eventType(java.lang.String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  public java.lang.String getEventType() {
    return eventType;
  }


  public void setEventType(java.lang.String eventType) {
    this.eventType = eventType;
  }


  public RestfulCalendarV4 href(java.lang.String href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  public java.lang.String getHref() {
    return href;
  }


  public void setHref(java.lang.String href) {
    this.href = href;
  }


  public RestfulCalendarV4 id(java.lang.String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public java.lang.String getId() {
    return id;
  }


  public void setId(java.lang.String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestfulCalendarV4 restfulCalendarV4 = (RestfulCalendarV4) o;
    return Objects.equals(this.background, restfulCalendarV4.background) &&
        Objects.equals(this.cloudHost, restfulCalendarV4.cloudHost) &&
        Objects.equals(this.cloudPath, restfulCalendarV4.cloudPath) &&
        Objects.equals(this.cloudPort, restfulCalendarV4.cloudPort) &&
        Objects.equals(this.cloudSsl, restfulCalendarV4.cloudSsl) &&
        Objects.equals(this.displayName, restfulCalendarV4.displayName) &&
        Objects.equals(this.eventType, restfulCalendarV4.eventType) &&
        Objects.equals(this.href, restfulCalendarV4.href) &&
        Objects.equals(this.id, restfulCalendarV4.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(background, cloudHost, cloudPath, cloudPort, cloudSsl, displayName, eventType, href, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestfulCalendarV4 {\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    cloudHost: ").append(toIndentedString(cloudHost)).append("\n");
    sb.append("    cloudPath: ").append(toIndentedString(cloudPath)).append("\n");
    sb.append("    cloudPort: ").append(toIndentedString(cloudPort)).append("\n");
    sb.append("    cloudSsl: ").append(toIndentedString(cloudSsl)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background");
    openapiFields.add("cloudHost");
    openapiFields.add("cloudPath");
    openapiFields.add("cloudPort");
    openapiFields.add("cloudSsl");
    openapiFields.add("displayName");
    openapiFields.add("eventType");
    openapiFields.add("href");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestfulCalendarV4
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestfulCalendarV4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestfulCalendarV4 is not found in the empty JSON string", RestfulCalendarV4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestfulCalendarV4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestfulCalendarV4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudHost") != null && !jsonObj.get("cloudHost").isJsonNull()) && !jsonObj.get("cloudHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudHost").toString()));
      }
      if ((jsonObj.get("cloudPath") != null && !jsonObj.get("cloudPath").isJsonNull()) && !jsonObj.get("cloudPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudPath").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestfulCalendarV4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestfulCalendarV4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestfulCalendarV4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestfulCalendarV4.class));

       return (TypeAdapter<T>) new TypeAdapter<RestfulCalendarV4>() {
           @Override
           public void write(JsonWriter out, RestfulCalendarV4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestfulCalendarV4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestfulCalendarV4 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestfulCalendarV4
  * @throws IOException if the JSON string is invalid with respect to RestfulCalendarV4
  */
  public static RestfulCalendarV4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestfulCalendarV4.class);
  }

 /**
  * Convert an instance of RestfulCalendarV4 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

