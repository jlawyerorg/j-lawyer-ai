/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestfulPartyV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T23:02:59.563495701+01:00[Europe/Berlin]")
public class RestfulPartyV1 {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private java.lang.String addressId;

  public static final String SERIALIZED_NAME_CASE_ID = "caseId";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private java.lang.String caseId;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private java.lang.String contact;

  public static final String SERIALIZED_NAME_CUSTOM1 = "custom1";
  @SerializedName(SERIALIZED_NAME_CUSTOM1)
  private java.lang.String custom1;

  public static final String SERIALIZED_NAME_CUSTOM2 = "custom2";
  @SerializedName(SERIALIZED_NAME_CUSTOM2)
  private java.lang.String custom2;

  public static final String SERIALIZED_NAME_CUSTOM3 = "custom3";
  @SerializedName(SERIALIZED_NAME_CUSTOM3)
  private java.lang.String custom3;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private java.lang.String id;

  public static final String SERIALIZED_NAME_INVOLVEMENT_TYPE = "involvementType";
  @SerializedName(SERIALIZED_NAME_INVOLVEMENT_TYPE)
  private java.lang.String involvementType;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private java.lang.String reference;

  public RestfulPartyV1() {
  }

  public RestfulPartyV1 addressId(java.lang.String addressId) {
    
    this.addressId = addressId;
    return this;
  }

   /**
   * Get addressId
   * @return addressId
  **/
  @javax.annotation.Nullable
  public java.lang.String getAddressId() {
    return addressId;
  }


  public void setAddressId(java.lang.String addressId) {
    this.addressId = addressId;
  }


  public RestfulPartyV1 caseId(java.lang.String caseId) {
    
    this.caseId = caseId;
    return this;
  }

   /**
   * Get caseId
   * @return caseId
  **/
  @javax.annotation.Nullable
  public java.lang.String getCaseId() {
    return caseId;
  }


  public void setCaseId(java.lang.String caseId) {
    this.caseId = caseId;
  }


  public RestfulPartyV1 contact(java.lang.String contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  public java.lang.String getContact() {
    return contact;
  }


  public void setContact(java.lang.String contact) {
    this.contact = contact;
  }


  public RestfulPartyV1 custom1(java.lang.String custom1) {
    
    this.custom1 = custom1;
    return this;
  }

   /**
   * Get custom1
   * @return custom1
  **/
  @javax.annotation.Nullable
  public java.lang.String getCustom1() {
    return custom1;
  }


  public void setCustom1(java.lang.String custom1) {
    this.custom1 = custom1;
  }


  public RestfulPartyV1 custom2(java.lang.String custom2) {
    
    this.custom2 = custom2;
    return this;
  }

   /**
   * Get custom2
   * @return custom2
  **/
  @javax.annotation.Nullable
  public java.lang.String getCustom2() {
    return custom2;
  }


  public void setCustom2(java.lang.String custom2) {
    this.custom2 = custom2;
  }


  public RestfulPartyV1 custom3(java.lang.String custom3) {
    
    this.custom3 = custom3;
    return this;
  }

   /**
   * Get custom3
   * @return custom3
  **/
  @javax.annotation.Nullable
  public java.lang.String getCustom3() {
    return custom3;
  }


  public void setCustom3(java.lang.String custom3) {
    this.custom3 = custom3;
  }


  public RestfulPartyV1 id(java.lang.String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public java.lang.String getId() {
    return id;
  }


  public void setId(java.lang.String id) {
    this.id = id;
  }


  public RestfulPartyV1 involvementType(java.lang.String involvementType) {
    
    this.involvementType = involvementType;
    return this;
  }

   /**
   * Get involvementType
   * @return involvementType
  **/
  @javax.annotation.Nullable
  public java.lang.String getInvolvementType() {
    return involvementType;
  }


  public void setInvolvementType(java.lang.String involvementType) {
    this.involvementType = involvementType;
  }


  public RestfulPartyV1 reference(java.lang.String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  public java.lang.String getReference() {
    return reference;
  }


  public void setReference(java.lang.String reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestfulPartyV1 restfulPartyV1 = (RestfulPartyV1) o;
    return Objects.equals(this.addressId, restfulPartyV1.addressId) &&
        Objects.equals(this.caseId, restfulPartyV1.caseId) &&
        Objects.equals(this.contact, restfulPartyV1.contact) &&
        Objects.equals(this.custom1, restfulPartyV1.custom1) &&
        Objects.equals(this.custom2, restfulPartyV1.custom2) &&
        Objects.equals(this.custom3, restfulPartyV1.custom3) &&
        Objects.equals(this.id, restfulPartyV1.id) &&
        Objects.equals(this.involvementType, restfulPartyV1.involvementType) &&
        Objects.equals(this.reference, restfulPartyV1.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, caseId, contact, custom1, custom2, custom3, id, involvementType, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestfulPartyV1 {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    custom1: ").append(toIndentedString(custom1)).append("\n");
    sb.append("    custom2: ").append(toIndentedString(custom2)).append("\n");
    sb.append("    custom3: ").append(toIndentedString(custom3)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    involvementType: ").append(toIndentedString(involvementType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("caseId");
    openapiFields.add("contact");
    openapiFields.add("custom1");
    openapiFields.add("custom2");
    openapiFields.add("custom3");
    openapiFields.add("id");
    openapiFields.add("involvementType");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestfulPartyV1
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestfulPartyV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestfulPartyV1 is not found in the empty JSON string", RestfulPartyV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestfulPartyV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestfulPartyV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if ((jsonObj.get("caseId") != null && !jsonObj.get("caseId").isJsonNull()) && !jsonObj.get("caseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseId").toString()));
      }
      if ((jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) && !jsonObj.get("contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact").toString()));
      }
      if ((jsonObj.get("custom1") != null && !jsonObj.get("custom1").isJsonNull()) && !jsonObj.get("custom1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom1").toString()));
      }
      if ((jsonObj.get("custom2") != null && !jsonObj.get("custom2").isJsonNull()) && !jsonObj.get("custom2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom2").toString()));
      }
      if ((jsonObj.get("custom3") != null && !jsonObj.get("custom3").isJsonNull()) && !jsonObj.get("custom3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom3").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("involvementType") != null && !jsonObj.get("involvementType").isJsonNull()) && !jsonObj.get("involvementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `involvementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("involvementType").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestfulPartyV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestfulPartyV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestfulPartyV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestfulPartyV1.class));

       return (TypeAdapter<T>) new TypeAdapter<RestfulPartyV1>() {
           @Override
           public void write(JsonWriter out, RestfulPartyV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestfulPartyV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestfulPartyV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestfulPartyV1
  * @throws IOException if the JSON string is invalid with respect to RestfulPartyV1
  */
  public static RestfulPartyV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestfulPartyV1.class);
  }

 /**
  * Convert an instance of RestfulPartyV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

