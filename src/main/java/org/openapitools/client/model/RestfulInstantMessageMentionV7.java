/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestfulInstantMessageMentionV7
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T23:02:59.563495701+01:00[Europe/Berlin]")
public class RestfulInstantMessageMentionV7 {
  public static final String SERIALIZED_NAME_DONE = "done";
  @SerializedName(SERIALIZED_NAME_DONE)
  private Boolean done;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private java.lang.String id;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private java.lang.String principal;

  public static final String SERIALIZED_NAME_STATUS_CHANGED = "statusChanged";
  @SerializedName(SERIALIZED_NAME_STATUS_CHANGED)
  private Object statusChanged;

  public RestfulInstantMessageMentionV7() {
  }

  public RestfulInstantMessageMentionV7 done(Boolean done) {
    
    this.done = done;
    return this;
  }

   /**
   * Get done
   * @return done
  **/
  @javax.annotation.Nullable
  public Boolean getDone() {
    return done;
  }


  public void setDone(Boolean done) {
    this.done = done;
  }


  public RestfulInstantMessageMentionV7 id(java.lang.String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public java.lang.String getId() {
    return id;
  }


  public void setId(java.lang.String id) {
    this.id = id;
  }


  public RestfulInstantMessageMentionV7 principal(java.lang.String principal) {
    
    this.principal = principal;
    return this;
  }

   /**
   * Get principal
   * @return principal
  **/
  @javax.annotation.Nullable
  public java.lang.String getPrincipal() {
    return principal;
  }


  public void setPrincipal(java.lang.String principal) {
    this.principal = principal;
  }


  public RestfulInstantMessageMentionV7 statusChanged(Object statusChanged) {
    
    this.statusChanged = statusChanged;
    return this;
  }

   /**
   * Get statusChanged
   * @return statusChanged
  **/
  @javax.annotation.Nullable
  public Object getStatusChanged() {
    return statusChanged;
  }


  public void setStatusChanged(Object statusChanged) {
    this.statusChanged = statusChanged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestfulInstantMessageMentionV7 restfulInstantMessageMentionV7 = (RestfulInstantMessageMentionV7) o;
    return Objects.equals(this.done, restfulInstantMessageMentionV7.done) &&
        Objects.equals(this.id, restfulInstantMessageMentionV7.id) &&
        Objects.equals(this.principal, restfulInstantMessageMentionV7.principal) &&
        Objects.equals(this.statusChanged, restfulInstantMessageMentionV7.statusChanged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(done, id, principal, statusChanged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestfulInstantMessageMentionV7 {\n");
    sb.append("    done: ").append(toIndentedString(done)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    statusChanged: ").append(toIndentedString(statusChanged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("done");
    openapiFields.add("id");
    openapiFields.add("principal");
    openapiFields.add("statusChanged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestfulInstantMessageMentionV7
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestfulInstantMessageMentionV7.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestfulInstantMessageMentionV7 is not found in the empty JSON string", RestfulInstantMessageMentionV7.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestfulInstantMessageMentionV7.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestfulInstantMessageMentionV7` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) && !jsonObj.get("principal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestfulInstantMessageMentionV7.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestfulInstantMessageMentionV7' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestfulInstantMessageMentionV7> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestfulInstantMessageMentionV7.class));

       return (TypeAdapter<T>) new TypeAdapter<RestfulInstantMessageMentionV7>() {
           @Override
           public void write(JsonWriter out, RestfulInstantMessageMentionV7 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestfulInstantMessageMentionV7 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestfulInstantMessageMentionV7 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestfulInstantMessageMentionV7
  * @throws IOException if the JSON string is invalid with respect to RestfulInstantMessageMentionV7
  */
  public static RestfulInstantMessageMentionV7 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestfulInstantMessageMentionV7.class);
  }

 /**
  * Convert an instance of RestfulInstantMessageMentionV7 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

