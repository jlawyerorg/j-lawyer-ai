/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestfulUserV6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T23:02:59.563495701+01:00[Europe/Berlin]")
public class RestfulUserV6 {
  public static final String SERIALIZED_NAME_ABBREVIATION = "abbreviation";
  @SerializedName(SERIALIZED_NAME_ABBREVIATION)
  private java.lang.String abbreviation;

  public static final String SERIALIZED_NAME_AREA_CODE = "areaCode";
  @SerializedName(SERIALIZED_NAME_AREA_CODE)
  private java.lang.String areaCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private java.lang.String countryCode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private java.lang.String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private java.lang.String externalId;

  public static final String SERIALIZED_NAME_LAWYER = "lawyer";
  @SerializedName(SERIALIZED_NAME_LAWYER)
  private Boolean lawyer;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private java.lang.String principalId;

  public RestfulUserV6() {
  }

  public RestfulUserV6 abbreviation(java.lang.String abbreviation) {
    
    this.abbreviation = abbreviation;
    return this;
  }

   /**
   * Get abbreviation
   * @return abbreviation
  **/
  @javax.annotation.Nullable
  public java.lang.String getAbbreviation() {
    return abbreviation;
  }


  public void setAbbreviation(java.lang.String abbreviation) {
    this.abbreviation = abbreviation;
  }


  public RestfulUserV6 areaCode(java.lang.String areaCode) {
    
    this.areaCode = areaCode;
    return this;
  }

   /**
   * Get areaCode
   * @return areaCode
  **/
  @javax.annotation.Nullable
  public java.lang.String getAreaCode() {
    return areaCode;
  }


  public void setAreaCode(java.lang.String areaCode) {
    this.areaCode = areaCode;
  }


  public RestfulUserV6 countryCode(java.lang.String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public java.lang.String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(java.lang.String countryCode) {
    this.countryCode = countryCode;
  }


  public RestfulUserV6 displayName(java.lang.String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public java.lang.String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
  }


  public RestfulUserV6 externalId(java.lang.String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public java.lang.String getExternalId() {
    return externalId;
  }


  public void setExternalId(java.lang.String externalId) {
    this.externalId = externalId;
  }


  public RestfulUserV6 lawyer(Boolean lawyer) {
    
    this.lawyer = lawyer;
    return this;
  }

   /**
   * Get lawyer
   * @return lawyer
  **/
  @javax.annotation.Nullable
  public Boolean getLawyer() {
    return lawyer;
  }


  public void setLawyer(Boolean lawyer) {
    this.lawyer = lawyer;
  }


  public RestfulUserV6 principalId(java.lang.String principalId) {
    
    this.principalId = principalId;
    return this;
  }

   /**
   * Get principalId
   * @return principalId
  **/
  @javax.annotation.Nullable
  public java.lang.String getPrincipalId() {
    return principalId;
  }


  public void setPrincipalId(java.lang.String principalId) {
    this.principalId = principalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestfulUserV6 restfulUserV6 = (RestfulUserV6) o;
    return Objects.equals(this.abbreviation, restfulUserV6.abbreviation) &&
        Objects.equals(this.areaCode, restfulUserV6.areaCode) &&
        Objects.equals(this.countryCode, restfulUserV6.countryCode) &&
        Objects.equals(this.displayName, restfulUserV6.displayName) &&
        Objects.equals(this.externalId, restfulUserV6.externalId) &&
        Objects.equals(this.lawyer, restfulUserV6.lawyer) &&
        Objects.equals(this.principalId, restfulUserV6.principalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abbreviation, areaCode, countryCode, displayName, externalId, lawyer, principalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestfulUserV6 {\n");
    sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
    sb.append("    areaCode: ").append(toIndentedString(areaCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    lawyer: ").append(toIndentedString(lawyer)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abbreviation");
    openapiFields.add("areaCode");
    openapiFields.add("countryCode");
    openapiFields.add("displayName");
    openapiFields.add("externalId");
    openapiFields.add("lawyer");
    openapiFields.add("principalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestfulUserV6
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestfulUserV6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestfulUserV6 is not found in the empty JSON string", RestfulUserV6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestfulUserV6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestfulUserV6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abbreviation") != null && !jsonObj.get("abbreviation").isJsonNull()) && !jsonObj.get("abbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abbreviation").toString()));
      }
      if ((jsonObj.get("areaCode") != null && !jsonObj.get("areaCode").isJsonNull()) && !jsonObj.get("areaCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `areaCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("areaCode").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("principalId") != null && !jsonObj.get("principalId").isJsonNull()) && !jsonObj.get("principalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestfulUserV6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestfulUserV6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestfulUserV6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestfulUserV6.class));

       return (TypeAdapter<T>) new TypeAdapter<RestfulUserV6>() {
           @Override
           public void write(JsonWriter out, RestfulUserV6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestfulUserV6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestfulUserV6 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestfulUserV6
  * @throws IOException if the JSON string is invalid with respect to RestfulUserV6
  */
  public static RestfulUserV6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestfulUserV6.class);
  }

 /**
  * Convert an instance of RestfulUserV6 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

