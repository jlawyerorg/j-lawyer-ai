/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestfulDocumentContentV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T23:02:59.563495701+01:00[Europe/Berlin]")
public class RestfulDocumentContentV1 {
  public static final String SERIALIZED_NAME_BASE64CONTENT = "base64content";
  @SerializedName(SERIALIZED_NAME_BASE64CONTENT)
  private java.lang.String base64content;

  public static final String SERIALIZED_NAME_CASE_ID = "caseId";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private java.lang.String caseId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private java.lang.String externalId;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private java.lang.String fileName;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private java.lang.String folderId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private java.lang.String id;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public RestfulDocumentContentV1() {
  }

  public RestfulDocumentContentV1 base64content(java.lang.String base64content) {
    
    this.base64content = base64content;
    return this;
  }

   /**
   * Get base64content
   * @return base64content
  **/
  @javax.annotation.Nullable
  public java.lang.String getBase64content() {
    return base64content;
  }


  public void setBase64content(java.lang.String base64content) {
    this.base64content = base64content;
  }


  public RestfulDocumentContentV1 caseId(java.lang.String caseId) {
    
    this.caseId = caseId;
    return this;
  }

   /**
   * Get caseId
   * @return caseId
  **/
  @javax.annotation.Nullable
  public java.lang.String getCaseId() {
    return caseId;
  }


  public void setCaseId(java.lang.String caseId) {
    this.caseId = caseId;
  }


  public RestfulDocumentContentV1 externalId(java.lang.String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public java.lang.String getExternalId() {
    return externalId;
  }


  public void setExternalId(java.lang.String externalId) {
    this.externalId = externalId;
  }


  public RestfulDocumentContentV1 fileName(java.lang.String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @javax.annotation.Nullable
  public java.lang.String getFileName() {
    return fileName;
  }


  public void setFileName(java.lang.String fileName) {
    this.fileName = fileName;
  }


  public RestfulDocumentContentV1 folderId(java.lang.String folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nullable
  public java.lang.String getFolderId() {
    return folderId;
  }


  public void setFolderId(java.lang.String folderId) {
    this.folderId = folderId;
  }


  public RestfulDocumentContentV1 id(java.lang.String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public java.lang.String getId() {
    return id;
  }


  public void setId(java.lang.String id) {
    this.id = id;
  }


  public RestfulDocumentContentV1 version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestfulDocumentContentV1 restfulDocumentContentV1 = (RestfulDocumentContentV1) o;
    return Objects.equals(this.base64content, restfulDocumentContentV1.base64content) &&
        Objects.equals(this.caseId, restfulDocumentContentV1.caseId) &&
        Objects.equals(this.externalId, restfulDocumentContentV1.externalId) &&
        Objects.equals(this.fileName, restfulDocumentContentV1.fileName) &&
        Objects.equals(this.folderId, restfulDocumentContentV1.folderId) &&
        Objects.equals(this.id, restfulDocumentContentV1.id) &&
        Objects.equals(this.version, restfulDocumentContentV1.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64content, caseId, externalId, fileName, folderId, id, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestfulDocumentContentV1 {\n");
    sb.append("    base64content: ").append(toIndentedString(base64content)).append("\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base64content");
    openapiFields.add("caseId");
    openapiFields.add("externalId");
    openapiFields.add("fileName");
    openapiFields.add("folderId");
    openapiFields.add("id");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestfulDocumentContentV1
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestfulDocumentContentV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestfulDocumentContentV1 is not found in the empty JSON string", RestfulDocumentContentV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestfulDocumentContentV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestfulDocumentContentV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base64content") != null && !jsonObj.get("base64content").isJsonNull()) && !jsonObj.get("base64content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base64content").toString()));
      }
      if ((jsonObj.get("caseId") != null && !jsonObj.get("caseId").isJsonNull()) && !jsonObj.get("caseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("folderId") != null && !jsonObj.get("folderId").isJsonNull()) && !jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestfulDocumentContentV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestfulDocumentContentV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestfulDocumentContentV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestfulDocumentContentV1.class));

       return (TypeAdapter<T>) new TypeAdapter<RestfulDocumentContentV1>() {
           @Override
           public void write(JsonWriter out, RestfulDocumentContentV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestfulDocumentContentV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestfulDocumentContentV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestfulDocumentContentV1
  * @throws IOException if the JSON string is invalid with respect to RestfulDocumentContentV1
  */
  public static RestfulDocumentContentV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestfulDocumentContentV1.class);
  }

 /**
  * Convert an instance of RestfulDocumentContentV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

