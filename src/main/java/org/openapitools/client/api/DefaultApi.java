/*
 * j-lawyer-io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiMetadataV1;
import org.openapitools.client.model.RestfulCalendarV4;
import org.openapitools.client.model.RestfulCaseFolderV3;
import org.openapitools.client.model.RestfulCaseHistoryV5;
import org.openapitools.client.model.RestfulCaseOverviewV1;
import org.openapitools.client.model.RestfulCaseSyncSettingV5;
import org.openapitools.client.model.RestfulCaseV1;
import org.openapitools.client.model.RestfulCaseV2;
import org.openapitools.client.model.RestfulContactOverviewV1;
import org.openapitools.client.model.RestfulContactV1;
import org.openapitools.client.model.RestfulContactV2;
import org.openapitools.client.model.RestfulDataBucketV6;
import org.openapitools.client.model.RestfulDocumentContentV1;
import org.openapitools.client.model.RestfulDocumentV1;
import org.openapitools.client.model.RestfulDocumentValidationRequestV7;
import org.openapitools.client.model.RestfulDueDateV1;
import org.openapitools.client.model.RestfulDueDateV4;
import org.openapitools.client.model.RestfulDueDateV6;
import org.openapitools.client.model.RestfulFolderTemplateV3;
import org.openapitools.client.model.RestfulFormEntryV1;
import org.openapitools.client.model.RestfulFormTypeV1;
import org.openapitools.client.model.RestfulFormV1;
import org.openapitools.client.model.RestfulInstantMessageV7;
import org.openapitools.client.model.RestfulOptionV7;
import org.openapitools.client.model.RestfulPartyTypeV1;
import org.openapitools.client.model.RestfulPartyV1;
import org.openapitools.client.model.RestfulPlaceholderV6;
import org.openapitools.client.model.RestfulStatusResponseV7;
import org.openapitools.client.model.RestfulTagV1;
import org.openapitools.client.model.RestfulUserV6;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1CasesCreatePut
     * @param body case data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesCreatePutCall(RestfulCaseV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesCreatePutValidateBeforeCall(RestfulCaseV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesCreatePut(Async)");
        }

        return v1CasesCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new case
     * @param body case data (required)
     * @return RestfulCaseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseV1 v1CasesCreatePut(RestfulCaseV1 body) throws ApiException {
        ApiResponse<RestfulCaseV1> localVarResp = v1CasesCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new case
     * @param body case data (required)
     * @return ApiResponse&lt;RestfulCaseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseV1> v1CasesCreatePutWithHttpInfo(RestfulCaseV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulCaseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new case
     * @param body case data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesCreatePutAsync(RestfulCaseV1 body, final ApiCallback<RestfulCaseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesDocumentCreatePut
     * @param body document data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentCreatePutCall(RestfulDocumentContentV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/document/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesDocumentCreatePutValidateBeforeCall(RestfulDocumentContentV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesDocumentCreatePut(Async)");
        }

        return v1CasesDocumentCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new document within an existing case. An ID for the document is not required in the request.
     * @param body document data (required)
     * @return RestfulDocumentContentV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDocumentContentV1 v1CasesDocumentCreatePut(RestfulDocumentContentV1 body) throws ApiException {
        ApiResponse<RestfulDocumentContentV1> localVarResp = v1CasesDocumentCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new document within an existing case. An ID for the document is not required in the request.
     * @param body document data (required)
     * @return ApiResponse&lt;RestfulDocumentContentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDocumentContentV1> v1CasesDocumentCreatePutWithHttpInfo(RestfulDocumentContentV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesDocumentCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new document within an existing case. An ID for the document is not required in the request.
     * @param body document data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentCreatePutAsync(RestfulDocumentContentV1 body, final ApiCallback<RestfulDocumentContentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesDocumentCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesDocumentIdContentGet
     * @param id document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentIdContentGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/document/{id}/content"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesDocumentIdContentGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesDocumentIdContentGet(Async)");
        }

        return v1CasesDocumentIdContentGetCall(id, _callback);

    }

    /**
     * 
     * Returns a a documents content given its ID. The return value is Base64 encoded.
     * @param id document ID (required)
     * @return RestfulDocumentContentV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDocumentContentV1 v1CasesDocumentIdContentGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulDocumentContentV1> localVarResp = v1CasesDocumentIdContentGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a a documents content given its ID. The return value is Base64 encoded.
     * @param id document ID (required)
     * @return ApiResponse&lt;RestfulDocumentContentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDocumentContentV1> v1CasesDocumentIdContentGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesDocumentIdContentGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a a documents content given its ID. The return value is Base64 encoded.
     * @param id document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentIdContentGetAsync(java.lang.String id, final ApiCallback<RestfulDocumentContentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesDocumentIdContentGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesDocumentIdDeleteDelete
     * @param id document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentIdDeleteDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/document/{id}/delete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesDocumentIdDeleteDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesDocumentIdDeleteDelete(Async)");
        }

        return v1CasesDocumentIdDeleteDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a document based on its ID
     * @param id document ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v1CasesDocumentIdDeleteDelete(java.lang.String id) throws ApiException {
        v1CasesDocumentIdDeleteDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a document based on its ID
     * @param id document ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CasesDocumentIdDeleteDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesDocumentIdDeleteDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a document based on its ID
     * @param id document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentIdDeleteDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesDocumentIdDeleteDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesDocumentUpdatePut
     * @param body the documents new data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentUpdatePutCall(RestfulDocumentContentV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/document/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesDocumentUpdatePutValidateBeforeCall(RestfulDocumentContentV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesDocumentUpdatePut(Async)");
        }

        return v1CasesDocumentUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates a document. This method can be used for both renaming a document as well as for uploading new content. For renaming, the request does not need to provide content. For uploading new content, there is no need to provide a file name. Will not update an external ID.
     * @param body the documents new data (required)
     * @return RestfulDocumentContentV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDocumentContentV1 v1CasesDocumentUpdatePut(RestfulDocumentContentV1 body) throws ApiException {
        ApiResponse<RestfulDocumentContentV1> localVarResp = v1CasesDocumentUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a document. This method can be used for both renaming a document as well as for uploading new content. For renaming, the request does not need to provide content. For uploading new content, there is no need to provide a file name. Will not update an external ID.
     * @param body the documents new data (required)
     * @return ApiResponse&lt;RestfulDocumentContentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDocumentContentV1> v1CasesDocumentUpdatePutWithHttpInfo(RestfulDocumentContentV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesDocumentUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a document. This method can be used for both renaming a document as well as for uploading new content. For renaming, the request does not need to provide content. For uploading new content, there is no need to provide a file name. Will not update an external ID.
     * @param body the documents new data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesDocumentUpdatePutAsync(RestfulDocumentContentV1 body, final ApiCallback<RestfulDocumentContentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesDocumentUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDocumentContentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdDocumentsGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdDocumentsGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}/documents"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdDocumentsGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdDocumentsGet(Async)");
        }

        return v1CasesIdDocumentsGetCall(id, _callback);

    }

    /**
     * 
     * Returns a list of documents for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulDocumentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulDocumentV1> v1CasesIdDocumentsGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulDocumentV1>> localVarResp = v1CasesIdDocumentsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of documents for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulDocumentV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulDocumentV1>> v1CasesIdDocumentsGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdDocumentsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulDocumentV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of documents for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdDocumentsGetAsync(java.lang.String id, final ApiCallback<List<RestfulDocumentV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdDocumentsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulDocumentV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdDuedatesGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdDuedatesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}/duedates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdDuedatesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdDuedatesGet(Async)");
        }

        return v1CasesIdDuedatesGetCall(id, _callback);

    }

    /**
     * 
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulDueDateV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulDueDateV1> v1CasesIdDuedatesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulDueDateV1>> localVarResp = v1CasesIdDuedatesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulDueDateV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulDueDateV1>> v1CasesIdDuedatesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdDuedatesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulDueDateV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdDuedatesGetAsync(java.lang.String id, final ApiCallback<List<RestfulDueDateV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdDuedatesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulDueDateV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdFormsGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdFormsGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}/forms"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdFormsGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdFormsGet(Async)");
        }

        return v1CasesIdFormsGetCall(id, _callback);

    }

    /**
     * 
     * Returns a list of forms for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulFormV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulFormV1> v1CasesIdFormsGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulFormV1>> localVarResp = v1CasesIdFormsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of forms for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulFormV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulFormV1>> v1CasesIdFormsGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdFormsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulFormV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of forms for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdFormsGetAsync(java.lang.String id, final ApiCallback<List<RestfulFormV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdFormsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulFormV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdGet(Async)");
        }

        return v1CasesIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns all case metadata based on its ID
     * @param id case ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object v1CasesIdGet(java.lang.String id) throws ApiException {
        ApiResponse<Object> localVarResp = v1CasesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all case metadata based on its ID
     * @param id case ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> v1CasesIdGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all case metadata based on its ID
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdGetAsync(java.lang.String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdPartiesGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdPartiesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}/parties"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdPartiesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdPartiesGet(Async)");
        }

        return v1CasesIdPartiesGetCall(id, _callback);

    }

    /**
     * 
     * Returns a list of all parties involved in a case
     * @param id case ID (required)
     * @return List&lt;RestfulPartyV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulPartyV1> v1CasesIdPartiesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulPartyV1>> localVarResp = v1CasesIdPartiesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all parties involved in a case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulPartyV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulPartyV1>> v1CasesIdPartiesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdPartiesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulPartyV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all parties involved in a case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdPartiesGetAsync(java.lang.String id, final ApiCallback<List<RestfulPartyV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdPartiesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulPartyV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesIdTagsGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdTagsGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesIdTagsGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesIdTagsGet(Async)");
        }

        return v1CasesIdTagsGetCall(id, _callback);

    }

    /**
     * 
     * Returns all tags attached to the case give by its ID
     * @param id case ID (required)
     * @return List&lt;RestfulTagV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulTagV1> v1CasesIdTagsGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulTagV1>> localVarResp = v1CasesIdTagsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all tags attached to the case give by its ID
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulTagV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulTagV1>> v1CasesIdTagsGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesIdTagsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all tags attached to the case give by its ID
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesIdTagsGetAsync(java.lang.String id, final ApiCallback<List<RestfulTagV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesIdTagsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1CasesListGetCall(_callback);

    }

    /**
     * 
     * Lists all cases
     * @return List&lt;RestfulCaseOverviewV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulCaseOverviewV1> v1CasesListGet() throws ApiException {
        ApiResponse<List<RestfulCaseOverviewV1>> localVarResp = v1CasesListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all cases
     * @return ApiResponse&lt;List&lt;RestfulCaseOverviewV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulCaseOverviewV1>> v1CasesListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CasesListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all cases
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesListGetAsync(final ApiCallback<List<RestfulCaseOverviewV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesPartyCreatePut
     * @param body The parties metadata. Use CLIENT | OPPONENT | OTHER for involvementType. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyCreatePutCall(RestfulPartyV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/party/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesPartyCreatePutValidateBeforeCall(RestfulPartyV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesPartyCreatePut(Async)");
        }

        return v1CasesPartyCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new party in a given case.
     * @param body The parties metadata. Use CLIENT | OPPONENT | OTHER for involvementType. (required)
     * @return RestfulPartyV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulPartyV1 v1CasesPartyCreatePut(RestfulPartyV1 body) throws ApiException {
        ApiResponse<RestfulPartyV1> localVarResp = v1CasesPartyCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new party in a given case.
     * @param body The parties metadata. Use CLIENT | OPPONENT | OTHER for involvementType. (required)
     * @return ApiResponse&lt;RestfulPartyV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulPartyV1> v1CasesPartyCreatePutWithHttpInfo(RestfulPartyV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesPartyCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulPartyV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new party in a given case.
     * @param body The parties metadata. Use CLIENT | OPPONENT | OTHER for involvementType. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyCreatePutAsync(RestfulPartyV1 body, final ApiCallback<RestfulPartyV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesPartyCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulPartyV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesPartyIdDeleteDelete
     * @param id parties ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyIdDeleteDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/party/{id}/delete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesPartyIdDeleteDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1CasesPartyIdDeleteDelete(Async)");
        }

        return v1CasesPartyIdDeleteDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a party from a case based on its ID
     * @param id parties ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v1CasesPartyIdDeleteDelete(java.lang.String id) throws ApiException {
        v1CasesPartyIdDeleteDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a party from a case based on its ID
     * @param id parties ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CasesPartyIdDeleteDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1CasesPartyIdDeleteDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a party from a case based on its ID
     * @param id parties ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyIdDeleteDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesPartyIdDeleteDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesPartyTypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyTypesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/party/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesPartyTypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1CasesPartyTypesGetCall(_callback);

    }

    /**
     * 
     * Lists all party types as configured in the system
     * @return List&lt;RestfulPartyTypeV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulPartyTypeV1> v1CasesPartyTypesGet() throws ApiException {
        ApiResponse<List<RestfulPartyTypeV1>> localVarResp = v1CasesPartyTypesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all party types as configured in the system
     * @return ApiResponse&lt;List&lt;RestfulPartyTypeV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulPartyTypeV1>> v1CasesPartyTypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CasesPartyTypesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulPartyTypeV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all party types as configured in the system
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyTypesGetAsync(final ApiCallback<List<RestfulPartyTypeV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesPartyTypesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulPartyTypeV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesPartyUpdatePut
     * @param body the parties new data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyUpdatePutCall(RestfulPartyV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/party/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesPartyUpdatePutValidateBeforeCall(RestfulPartyV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesPartyUpdatePut(Async)");
        }

        return v1CasesPartyUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates a party.
     * @param body the parties new data (required)
     * @return RestfulPartyV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulPartyV1 v1CasesPartyUpdatePut(RestfulPartyV1 body) throws ApiException {
        ApiResponse<RestfulPartyV1> localVarResp = v1CasesPartyUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a party.
     * @param body the parties new data (required)
     * @return ApiResponse&lt;RestfulPartyV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulPartyV1> v1CasesPartyUpdatePutWithHttpInfo(RestfulPartyV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesPartyUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulPartyV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a party.
     * @param body the parties new data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesPartyUpdatePutAsync(RestfulPartyV1 body, final ApiCallback<RestfulPartyV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesPartyUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulPartyV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CasesUpdatePut
     * @param body case data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesUpdatePutCall(RestfulCaseV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/cases/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CasesUpdatePutValidateBeforeCall(RestfulCaseV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CasesUpdatePut(Async)");
        }

        return v1CasesUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates an existing case based on its ID. The file number is immutable.
     * @param body case data (required)
     * @return RestfulCaseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseV1 v1CasesUpdatePut(RestfulCaseV1 body) throws ApiException {
        ApiResponse<RestfulCaseV1> localVarResp = v1CasesUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing case based on its ID. The file number is immutable.
     * @param body case data (required)
     * @return ApiResponse&lt;RestfulCaseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseV1> v1CasesUpdatePutWithHttpInfo(RestfulCaseV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1CasesUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulCaseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing case based on its ID. The file number is immutable.
     * @param body case data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CasesUpdatePutAsync(RestfulCaseV1 body, final ApiCallback<RestfulCaseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CasesUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ContactsCreatePut
     * @param body contact data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsCreatePutCall(RestfulContactV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/contacts/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ContactsCreatePutValidateBeforeCall(RestfulContactV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ContactsCreatePut(Async)");
        }

        return v1ContactsCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new contact
     * @param body contact data (required)
     * @return RestfulContactV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV1 v1ContactsCreatePut(RestfulContactV1 body) throws ApiException {
        ApiResponse<RestfulContactV1> localVarResp = v1ContactsCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new contact
     * @param body contact data (required)
     * @return ApiResponse&lt;RestfulContactV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV1> v1ContactsCreatePutWithHttpInfo(RestfulContactV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1ContactsCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new contact
     * @param body contact data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsCreatePutAsync(RestfulContactV1 body, final ApiCallback<RestfulContactV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ContactsCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ContactsIdGet
     * @param id contact ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsIdGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contacts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ContactsIdGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1ContactsIdGet(Async)");
        }

        return v1ContactsIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @return RestfulContactV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV1 v1ContactsIdGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulContactV1> localVarResp = v1ContactsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @return ApiResponse&lt;RestfulContactV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV1> v1ContactsIdGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1ContactsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsIdGetAsync(java.lang.String id, final ApiCallback<RestfulContactV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ContactsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ContactsListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contacts/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ContactsListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ContactsListGetCall(_callback);

    }

    /**
     * 
     * Lists all contacts
     * @return List&lt;RestfulContactOverviewV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulContactOverviewV1> v1ContactsListGet() throws ApiException {
        ApiResponse<List<RestfulContactOverviewV1>> localVarResp = v1ContactsListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all contacts
     * @return ApiResponse&lt;List&lt;RestfulContactOverviewV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulContactOverviewV1>> v1ContactsListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ContactsListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulContactOverviewV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all contacts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsListGetAsync(final ApiCallback<List<RestfulContactOverviewV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ContactsListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulContactOverviewV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ContactsUpdatePut
     * @param body the contacts data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsUpdatePutCall(RestfulContactV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/contacts/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ContactsUpdatePutValidateBeforeCall(RestfulContactV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ContactsUpdatePut(Async)");
        }

        return v1ContactsUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates an existing contact based on its ID
     * @param body the contacts data (required)
     * @return RestfulContactV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV1 v1ContactsUpdatePut(RestfulContactV1 body) throws ApiException {
        ApiResponse<RestfulContactV1> localVarResp = v1ContactsUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing contact based on its ID
     * @param body the contacts data (required)
     * @return ApiResponse&lt;RestfulContactV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV1> v1ContactsUpdatePutWithHttpInfo(RestfulContactV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1ContactsUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing contact based on its ID
     * @param body the contacts data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ContactsUpdatePutAsync(RestfulContactV1 body, final ApiCallback<RestfulContactV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ContactsUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FormsCreatePut
     * @param body form data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsCreatePutCall(RestfulFormV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/forms/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FormsCreatePutValidateBeforeCall(RestfulFormV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1FormsCreatePut(Async)");
        }

        return v1FormsCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new form within an existing case. An ID for the form is not required in the request. The value for placeholder must be unique within the cases forms, you cannot have two different forms with the same placeholder. Creating a form does not create empty dummy values for it. A client needs to explicityly set the entries or rely on a user editing it through the UI.
     * @param body form data (required)
     * @return RestfulFormV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulFormV1 v1FormsCreatePut(RestfulFormV1 body) throws ApiException {
        ApiResponse<RestfulFormV1> localVarResp = v1FormsCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new form within an existing case. An ID for the form is not required in the request. The value for placeholder must be unique within the cases forms, you cannot have two different forms with the same placeholder. Creating a form does not create empty dummy values for it. A client needs to explicityly set the entries or rely on a user editing it through the UI.
     * @param body form data (required)
     * @return ApiResponse&lt;RestfulFormV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulFormV1> v1FormsCreatePutWithHttpInfo(RestfulFormV1 body) throws ApiException {
        okhttp3.Call localVarCall = v1FormsCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulFormV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new form within an existing case. An ID for the form is not required in the request. The value for placeholder must be unique within the cases forms, you cannot have two different forms with the same placeholder. Creating a form does not create empty dummy values for it. A client needs to explicityly set the entries or rely on a user editing it through the UI.
     * @param body form data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsCreatePutAsync(RestfulFormV1 body, final ApiCallback<RestfulFormV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FormsCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulFormV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FormsIdDeleteDelete
     * @param body document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdDeleteDeleteCall(java.lang.String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/forms/{id}/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FormsIdDeleteDeleteValidateBeforeCall(java.lang.String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1FormsIdDeleteDelete(Async)");
        }

        return v1FormsIdDeleteDeleteCall(body, _callback);

    }

    /**
     * 
     * Deletes a document based on its ID
     * @param body document ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v1FormsIdDeleteDelete(java.lang.String body) throws ApiException {
        v1FormsIdDeleteDeleteWithHttpInfo(body);
    }

    /**
     * 
     * Deletes a document based on its ID
     * @param body document ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1FormsIdDeleteDeleteWithHttpInfo(java.lang.String body) throws ApiException {
        okhttp3.Call localVarCall = v1FormsIdDeleteDeleteValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a document based on its ID
     * @param body document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdDeleteDeleteAsync(java.lang.String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FormsIdDeleteDeleteValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FormsIdEntriesGet
     * @param id form ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdEntriesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/forms/{id}/entries"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FormsIdEntriesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1FormsIdEntriesGet(Async)");
        }

        return v1FormsIdEntriesGetCall(id, _callback);

    }

    /**
     * 
     * Returns all form entries based on a forms ID
     * @param id form ID (required)
     * @return List&lt;RestfulFormEntryV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulFormEntryV1> v1FormsIdEntriesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulFormEntryV1>> localVarResp = v1FormsIdEntriesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all form entries based on a forms ID
     * @param id form ID (required)
     * @return ApiResponse&lt;List&lt;RestfulFormEntryV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulFormEntryV1>> v1FormsIdEntriesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v1FormsIdEntriesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulFormEntryV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all form entries based on a forms ID
     * @param id form ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdEntriesGetAsync(java.lang.String id, final ApiCallback<List<RestfulFormEntryV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FormsIdEntriesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulFormEntryV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FormsIdEntriesUpdatePut
     * @param body the forms new entries (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdEntriesUpdatePutCall(List<RestfulFormEntryV1> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/forms/{id}/entries/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FormsIdEntriesUpdatePutValidateBeforeCall(List<RestfulFormEntryV1> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1FormsIdEntriesUpdatePut(Async)");
        }

        return v1FormsIdEntriesUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates ALL entries for an existing form. A client must provide ALL entries for the form. Updating a subset of entries is not supported. The services can be used to either create an initial set of entries for a form or to update exinsting entries.
     * @param body the forms new entries (required)
     * @return List&lt;RestfulFormEntryV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulFormEntryV1> v1FormsIdEntriesUpdatePut(List<RestfulFormEntryV1> body) throws ApiException {
        ApiResponse<List<RestfulFormEntryV1>> localVarResp = v1FormsIdEntriesUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates ALL entries for an existing form. A client must provide ALL entries for the form. Updating a subset of entries is not supported. The services can be used to either create an initial set of entries for a form or to update exinsting entries.
     * @param body the forms new entries (required)
     * @return ApiResponse&lt;List&lt;RestfulFormEntryV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulFormEntryV1>> v1FormsIdEntriesUpdatePutWithHttpInfo(List<RestfulFormEntryV1> body) throws ApiException {
        okhttp3.Call localVarCall = v1FormsIdEntriesUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<RestfulFormEntryV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates ALL entries for an existing form. A client must provide ALL entries for the form. Updating a subset of entries is not supported. The services can be used to either create an initial set of entries for a form or to update exinsting entries.
     * @param body the forms new entries (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsIdEntriesUpdatePutAsync(List<RestfulFormEntryV1> body, final ApiCallback<List<RestfulFormEntryV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FormsIdEntriesUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulFormEntryV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FormsTypesListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsTypesListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/forms/types/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FormsTypesListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1FormsTypesListGetCall(_callback);

    }

    /**
     * 
     * Lists all form types
     * @return List&lt;RestfulFormTypeV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulFormTypeV1> v1FormsTypesListGet() throws ApiException {
        ApiResponse<List<RestfulFormTypeV1>> localVarResp = v1FormsTypesListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all form types
     * @return ApiResponse&lt;List&lt;RestfulFormTypeV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulFormTypeV1>> v1FormsTypesListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1FormsTypesListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulFormTypeV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all form types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FormsTypesListGetAsync(final ApiCallback<List<RestfulFormTypeV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FormsTypesListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulFormTypeV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SecurityMetadataGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SecurityMetadataGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/security/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SecurityMetadataGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1SecurityMetadataGetCall(_callback);

    }

    /**
     * 
     * Returns this API backends metadata, such as API level. This can be used by a client to determine the capabilities of this backend.
     * @return ApiMetadataV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ApiMetadataV1 v1SecurityMetadataGet() throws ApiException {
        ApiResponse<ApiMetadataV1> localVarResp = v1SecurityMetadataGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns this API backends metadata, such as API level. This can be used by a client to determine the capabilities of this backend.
     * @return ApiResponse&lt;ApiMetadataV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiMetadataV1> v1SecurityMetadataGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1SecurityMetadataGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiMetadataV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns this API backends metadata, such as API level. This can be used by a client to determine the capabilities of this backend.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SecurityMetadataGetAsync(final ApiCallback<ApiMetadataV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SecurityMetadataGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiMetadataV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2CasesCreatePut
     * @param body case data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesCreatePutCall(RestfulCaseV2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/cases/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2CasesCreatePutValidateBeforeCall(RestfulCaseV2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2CasesCreatePut(Async)");
        }

        return v2CasesCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new case. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v2CasesCreatePut(RestfulCaseV2 body) throws ApiException {
        v2CasesCreatePutWithHttpInfo(body);
    }

    /**
     * 
     * Creates a new case. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2CasesCreatePutWithHttpInfo(RestfulCaseV2 body) throws ApiException {
        okhttp3.Call localVarCall = v2CasesCreatePutValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a new case. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesCreatePutAsync(RestfulCaseV2 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2CasesCreatePutValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2CasesIdGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesIdGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cases/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2CasesIdGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2CasesIdGet(Async)");
        }

        return v2CasesIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns all case metadata based on its ID. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param id case ID (required)
     * @return RestfulCaseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseV2 v2CasesIdGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulCaseV2> localVarResp = v2CasesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all case metadata based on its ID. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param id case ID (required)
     * @return ApiResponse&lt;RestfulCaseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseV2> v2CasesIdGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v2CasesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulCaseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all case metadata based on its ID. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesIdGetAsync(java.lang.String id, final ApiCallback<RestfulCaseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2CasesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2CasesUpdatePut
     * @param body case data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesUpdatePutCall(RestfulCaseV2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/cases/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2CasesUpdatePutValidateBeforeCall(RestfulCaseV2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2CasesUpdatePut(Async)");
        }

        return v2CasesUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates an existing case based on its ID. The file number is immutable. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v2CasesUpdatePut(RestfulCaseV2 body) throws ApiException {
        v2CasesUpdatePutWithHttpInfo(body);
    }

    /**
     * 
     * Updates an existing case based on its ID. The file number is immutable. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2CasesUpdatePutWithHttpInfo(RestfulCaseV2 body) throws ApiException {
        okhttp3.Call localVarCall = v2CasesUpdatePutValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates an existing case based on its ID. The file number is immutable. This service supports extended file numbers (including prefix, suffix, group and user).
     * @param body case data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CasesUpdatePutAsync(RestfulCaseV2 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2CasesUpdatePutValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ContactsByexternalidExtIdGet
     * @param extId the contacts external ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsByexternalidExtIdGetCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contacts/byexternalid/{extId}"
            .replace("{" + "extId" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ContactsByexternalidExtIdGetValidateBeforeCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling v2ContactsByexternalidExtIdGet(Async)");
        }

        return v2ContactsByexternalidExtIdGetCall(extId, _callback);

    }

    /**
     * 
     * Returns a contacts metadata given its external ID
     * @param extId the contacts external ID (required)
     * @return RestfulContactV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV2 v2ContactsByexternalidExtIdGet(java.lang.String extId) throws ApiException {
        ApiResponse<RestfulContactV2> localVarResp = v2ContactsByexternalidExtIdGetWithHttpInfo(extId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a contacts metadata given its external ID
     * @param extId the contacts external ID (required)
     * @return ApiResponse&lt;RestfulContactV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV2> v2ContactsByexternalidExtIdGetWithHttpInfo(java.lang.String extId) throws ApiException {
        okhttp3.Call localVarCall = v2ContactsByexternalidExtIdGetValidateBeforeCall(extId, null);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a contacts metadata given its external ID
     * @param extId the contacts external ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsByexternalidExtIdGetAsync(java.lang.String extId, final ApiCallback<RestfulContactV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ContactsByexternalidExtIdGetValidateBeforeCall(extId, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ContactsCreatePut
     * @param body contact data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsCreatePutCall(RestfulContactV2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/contacts/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ContactsCreatePutValidateBeforeCall(RestfulContactV2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2ContactsCreatePut(Async)");
        }

        return v2ContactsCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new contact
     * @param body contact data (required)
     * @return RestfulContactV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV2 v2ContactsCreatePut(RestfulContactV2 body) throws ApiException {
        ApiResponse<RestfulContactV2> localVarResp = v2ContactsCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new contact
     * @param body contact data (required)
     * @return ApiResponse&lt;RestfulContactV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV2> v2ContactsCreatePutWithHttpInfo(RestfulContactV2 body) throws ApiException {
        okhttp3.Call localVarCall = v2ContactsCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new contact
     * @param body contact data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsCreatePutAsync(RestfulContactV2 body, final ApiCallback<RestfulContactV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ContactsCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ContactsIdGet
     * @param id contact ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsIdGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contacts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ContactsIdGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2ContactsIdGet(Async)");
        }

        return v2ContactsIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @return RestfulContactV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV2 v2ContactsIdGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulContactV2> localVarResp = v2ContactsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @return ApiResponse&lt;RestfulContactV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV2> v2ContactsIdGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v2ContactsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a contacts metadata given its ID
     * @param id contact ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsIdGetAsync(java.lang.String id, final ApiCallback<RestfulContactV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ContactsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ContactsUpdatePut
     * @param body the contacts data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsUpdatePutCall(RestfulContactV2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/contacts/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ContactsUpdatePutValidateBeforeCall(RestfulContactV2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2ContactsUpdatePut(Async)");
        }

        return v2ContactsUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates an existing contact based on its ID. The external ID of the contact is only changed if provided by the client as a non-empty string. Setting the external ID to null / empty is not possible using this endpoint.
     * @param body the contacts data (required)
     * @return RestfulContactV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulContactV2 v2ContactsUpdatePut(RestfulContactV2 body) throws ApiException {
        ApiResponse<RestfulContactV2> localVarResp = v2ContactsUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing contact based on its ID. The external ID of the contact is only changed if provided by the client as a non-empty string. Setting the external ID to null / empty is not possible using this endpoint.
     * @param body the contacts data (required)
     * @return ApiResponse&lt;RestfulContactV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulContactV2> v2ContactsUpdatePutWithHttpInfo(RestfulContactV2 body) throws ApiException {
        okhttp3.Call localVarCall = v2ContactsUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing contact based on its ID. The external ID of the contact is only changed if provided by the client as a non-empty string. Setting the external ID to null / empty is not possible using this endpoint.
     * @param body the contacts data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ContactsUpdatePutAsync(RestfulContactV2 body, final ApiCallback<RestfulContactV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ContactsUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulContactV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3CasesFoldertemplatesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesFoldertemplatesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/cases/foldertemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3CasesFoldertemplatesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v3CasesFoldertemplatesGetCall(_callback);

    }

    /**
     * 
     * Returns all folder templates configured in the system.
     * @return List&lt;RestfulFolderTemplateV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulFolderTemplateV3> v3CasesFoldertemplatesGet() throws ApiException {
        ApiResponse<List<RestfulFolderTemplateV3>> localVarResp = v3CasesFoldertemplatesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all folder templates configured in the system.
     * @return ApiResponse&lt;List&lt;RestfulFolderTemplateV3&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulFolderTemplateV3>> v3CasesFoldertemplatesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v3CasesFoldertemplatesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulFolderTemplateV3>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all folder templates configured in the system.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesFoldertemplatesGetAsync(final ApiCallback<List<RestfulFolderTemplateV3>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3CasesFoldertemplatesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulFolderTemplateV3>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3CasesIdFoldersGet
     * @param id the case id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesIdFoldersGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/cases/{id}/folders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3CasesIdFoldersGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v3CasesIdFoldersGet(Async)");
        }

        return v3CasesIdFoldersGetCall(id, _callback);

    }

    /**
     * 
     * Returns the folder structure of a given case.
     * @param id the case id (required)
     * @return RestfulCaseFolderV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseFolderV3 v3CasesIdFoldersGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulCaseFolderV3> localVarResp = v3CasesIdFoldersGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the folder structure of a given case.
     * @param id the case id (required)
     * @return ApiResponse&lt;RestfulCaseFolderV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseFolderV3> v3CasesIdFoldersGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v3CasesIdFoldersGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulCaseFolderV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the folder structure of a given case.
     * @param id the case id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesIdFoldersGetAsync(java.lang.String id, final ApiCallback<RestfulCaseFolderV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3CasesIdFoldersGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseFolderV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3CasesIdFoldertemplatesTemplateIdApplyPut
     * @param id the case id (required)
     * @param templateId the ID of the folder template to be applied (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesIdFoldertemplatesTemplateIdApplyPutCall(java.lang.String id, java.lang.String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/cases/{id}/foldertemplates/{templateId}/apply"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3CasesIdFoldertemplatesTemplateIdApplyPutValidateBeforeCall(java.lang.String id, java.lang.String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v3CasesIdFoldertemplatesTemplateIdApplyPut(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling v3CasesIdFoldertemplatesTemplateIdApplyPut(Async)");
        }

        return v3CasesIdFoldertemplatesTemplateIdApplyPutCall(id, templateId, _callback);

    }

    /**
     * 
     * Applies a folder template to a case.
     * @param id the case id (required)
     * @param templateId the ID of the folder template to be applied (required)
     * @return RestfulCaseFolderV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseFolderV3 v3CasesIdFoldertemplatesTemplateIdApplyPut(java.lang.String id, java.lang.String templateId) throws ApiException {
        ApiResponse<RestfulCaseFolderV3> localVarResp = v3CasesIdFoldertemplatesTemplateIdApplyPutWithHttpInfo(id, templateId);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a folder template to a case.
     * @param id the case id (required)
     * @param templateId the ID of the folder template to be applied (required)
     * @return ApiResponse&lt;RestfulCaseFolderV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseFolderV3> v3CasesIdFoldertemplatesTemplateIdApplyPutWithHttpInfo(java.lang.String id, java.lang.String templateId) throws ApiException {
        okhttp3.Call localVarCall = v3CasesIdFoldertemplatesTemplateIdApplyPutValidateBeforeCall(id, templateId, null);
        Type localVarReturnType = new TypeToken<RestfulCaseFolderV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a folder template to a case.
     * @param id the case id (required)
     * @param templateId the ID of the folder template to be applied (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CasesIdFoldertemplatesTemplateIdApplyPutAsync(java.lang.String id, java.lang.String templateId, final ApiCallback<RestfulCaseFolderV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3CasesIdFoldertemplatesTemplateIdApplyPutValidateBeforeCall(id, templateId, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseFolderV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v4CalendarsListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4CalendarsListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/calendars/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v4CalendarsListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v4CalendarsListGetCall(_callback);

    }

    /**
     * 
     * Returns all calendars configured in the system
     * @return List&lt;RestfulCalendarV4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulCalendarV4> v4CalendarsListGet() throws ApiException {
        ApiResponse<List<RestfulCalendarV4>> localVarResp = v4CalendarsListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all calendars configured in the system
     * @return ApiResponse&lt;List&lt;RestfulCalendarV4&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulCalendarV4>> v4CalendarsListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v4CalendarsListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulCalendarV4>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all calendars configured in the system
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4CalendarsListGetAsync(final ApiCallback<List<RestfulCalendarV4>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v4CalendarsListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulCalendarV4>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v4CasesIdDuedatesGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4CasesIdDuedatesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/cases/{id}/duedates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v4CasesIdDuedatesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v4CasesIdDuedatesGet(Async)");
        }

        return v4CasesIdDuedatesGetCall(id, _callback);

    }

    /**
     * 
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulDueDateV4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulDueDateV4> v4CasesIdDuedatesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulDueDateV4>> localVarResp = v4CasesIdDuedatesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulDueDateV4&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulDueDateV4>> v4CasesIdDuedatesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v4CasesIdDuedatesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulDueDateV4>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all due dates for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4CasesIdDuedatesGetAsync(java.lang.String id, final ApiCallback<List<RestfulDueDateV4>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v4CasesIdDuedatesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulDueDateV4>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesDocumentIdTagsGet
     * @param id document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentIdTagsGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/cases/document/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesDocumentIdTagsGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesDocumentIdTagsGet(Async)");
        }

        return v5CasesDocumentIdTagsGetCall(id, _callback);

    }

    /**
     * 
     * Returns all tags attached to the document given by its ID
     * @param id document ID (required)
     * @return List&lt;RestfulTagV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulTagV1> v5CasesDocumentIdTagsGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulTagV1>> localVarResp = v5CasesDocumentIdTagsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all tags attached to the document given by its ID
     * @param id document ID (required)
     * @return ApiResponse&lt;List&lt;RestfulTagV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulTagV1>> v5CasesDocumentIdTagsGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5CasesDocumentIdTagsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all tags attached to the document given by its ID
     * @param id document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentIdTagsGetAsync(java.lang.String id, final ApiCallback<List<RestfulTagV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesDocumentIdTagsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesDocumentsIdTagsPut
     * @param id document ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentsIdTagsPutCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v5/cases/documents/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesDocumentsIdTagsPutValidateBeforeCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesDocumentsIdTagsPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v5CasesDocumentsIdTagsPut(Async)");
        }

        return v5CasesDocumentsIdTagsPutCall(id, body, _callback);

    }

    /**
     * 
     * Creates a document tag.
     * @param id document ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5CasesDocumentsIdTagsPut(java.lang.String id, RestfulTagV1 body) throws ApiException {
        v5CasesDocumentsIdTagsPutWithHttpInfo(id, body);
    }

    /**
     * 
     * Creates a document tag.
     * @param id document ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5CasesDocumentsIdTagsPutWithHttpInfo(java.lang.String id, RestfulTagV1 body) throws ApiException {
        okhttp3.Call localVarCall = v5CasesDocumentsIdTagsPutValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a document tag.
     * @param id document ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentsIdTagsPutAsync(java.lang.String id, RestfulTagV1 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesDocumentsIdTagsPutValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesDocumentsTagsIdDelete
     * @param id tag ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentsTagsIdDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/cases/documents/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesDocumentsTagsIdDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesDocumentsTagsIdDelete(Async)");
        }

        return v5CasesDocumentsTagsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a documents tag given the tags ID.
     * @param id tag ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5CasesDocumentsTagsIdDelete(java.lang.String id) throws ApiException {
        v5CasesDocumentsTagsIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a documents tag given the tags ID.
     * @param id tag ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5CasesDocumentsTagsIdDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5CasesDocumentsTagsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a documents tag given the tags ID.
     * @param id tag ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesDocumentsTagsIdDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesDocumentsTagsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesIdHistoryGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesIdHistoryGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/cases/{id}/history"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesIdHistoryGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesIdHistoryGet(Async)");
        }

        return v5CasesIdHistoryGetCall(id, _callback);

    }

    /**
     * 
     * Returns all history entries for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulCaseHistoryV5&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulCaseHistoryV5> v5CasesIdHistoryGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulCaseHistoryV5>> localVarResp = v5CasesIdHistoryGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all history entries for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulCaseHistoryV5&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulCaseHistoryV5>> v5CasesIdHistoryGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5CasesIdHistoryGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulCaseHistoryV5>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all history entries for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesIdHistoryGetAsync(java.lang.String id, final ApiCallback<List<RestfulCaseHistoryV5>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesIdHistoryGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulCaseHistoryV5>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesIdTagsPut
     * @param id case ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesIdTagsPutCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v5/cases/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesIdTagsPutValidateBeforeCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesIdTagsPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v5CasesIdTagsPut(Async)");
        }

        return v5CasesIdTagsPutCall(id, body, _callback);

    }

    /**
     * 
     * Creates a case tag.
     * @param id case ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5CasesIdTagsPut(java.lang.String id, RestfulTagV1 body) throws ApiException {
        v5CasesIdTagsPutWithHttpInfo(id, body);
    }

    /**
     * 
     * Creates a case tag.
     * @param id case ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5CasesIdTagsPutWithHttpInfo(java.lang.String id, RestfulTagV1 body) throws ApiException {
        okhttp3.Call localVarCall = v5CasesIdTagsPutValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a case tag.
     * @param id case ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesIdTagsPutAsync(java.lang.String id, RestfulTagV1 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesIdTagsPutValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesListSyncedPrincipalIdGet
     * @param principalId user name for whom syncable cases are requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesListSyncedPrincipalIdGetCall(java.lang.String principalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/cases/list/synced/{principalId}"
            .replace("{" + "principalId" + "}", localVarApiClient.escapeString(principalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesListSyncedPrincipalIdGetValidateBeforeCall(java.lang.String principalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'principalId' is set
        if (principalId == null) {
            throw new ApiException("Missing the required parameter 'principalId' when calling v5CasesListSyncedPrincipalIdGet(Async)");
        }

        return v5CasesListSyncedPrincipalIdGetCall(principalId, _callback);

    }

    /**
     * 
     * Returns IDs of all cases to be synced to the requesting users devices
     * @param principalId user name for whom syncable cases are requested (required)
     * @return List&lt;RestfulCaseOverviewV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulCaseOverviewV1> v5CasesListSyncedPrincipalIdGet(java.lang.String principalId) throws ApiException {
        ApiResponse<List<RestfulCaseOverviewV1>> localVarResp = v5CasesListSyncedPrincipalIdGetWithHttpInfo(principalId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns IDs of all cases to be synced to the requesting users devices
     * @param principalId user name for whom syncable cases are requested (required)
     * @return ApiResponse&lt;List&lt;RestfulCaseOverviewV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulCaseOverviewV1>> v5CasesListSyncedPrincipalIdGetWithHttpInfo(java.lang.String principalId) throws ApiException {
        okhttp3.Call localVarCall = v5CasesListSyncedPrincipalIdGetValidateBeforeCall(principalId, null);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns IDs of all cases to be synced to the requesting users devices
     * @param principalId user name for whom syncable cases are requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesListSyncedPrincipalIdGetAsync(java.lang.String principalId, final ApiCallback<List<RestfulCaseOverviewV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesListSyncedPrincipalIdGetValidateBeforeCall(principalId, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesSyncsettingsPut
     * @param body tuple of case id, user name and a boolean flag that indicates whether or not to sync (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesSyncsettingsPutCall(RestfulCaseSyncSettingV5 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v5/cases/syncsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesSyncsettingsPutValidateBeforeCall(RestfulCaseSyncSettingV5 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v5CasesSyncsettingsPut(Async)");
        }

        return v5CasesSyncsettingsPutCall(body, _callback);

    }

    /**
     * 
     * Enables or disables the synchronization of a given case for the requesting user.
     * @param body tuple of case id, user name and a boolean flag that indicates whether or not to sync (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5CasesSyncsettingsPut(RestfulCaseSyncSettingV5 body) throws ApiException {
        v5CasesSyncsettingsPutWithHttpInfo(body);
    }

    /**
     * 
     * Enables or disables the synchronization of a given case for the requesting user.
     * @param body tuple of case id, user name and a boolean flag that indicates whether or not to sync (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5CasesSyncsettingsPutWithHttpInfo(RestfulCaseSyncSettingV5 body) throws ApiException {
        okhttp3.Call localVarCall = v5CasesSyncsettingsPutValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables or disables the synchronization of a given case for the requesting user.
     * @param body tuple of case id, user name and a boolean flag that indicates whether or not to sync (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesSyncsettingsPutAsync(RestfulCaseSyncSettingV5 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesSyncsettingsPutValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5CasesTagsIdDelete
     * @param id tag ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesTagsIdDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/cases/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5CasesTagsIdDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5CasesTagsIdDelete(Async)");
        }

        return v5CasesTagsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a cases tag given the tags ID.
     * @param id tag ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5CasesTagsIdDelete(java.lang.String id) throws ApiException {
        v5CasesTagsIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a cases tag given the tags ID.
     * @param id tag ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5CasesTagsIdDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5CasesTagsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a cases tag given the tags ID.
     * @param id tag ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5CasesTagsIdDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5CasesTagsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5ContactsIdCasesGet
     * @param id contact ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdCasesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/contacts/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5ContactsIdCasesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5ContactsIdCasesGet(Async)");
        }

        return v5ContactsIdCasesGetCall(id, _callback);

    }

    /**
     * 
     * Returns all cases for the contact given by its ID
     * @param id contact ID (required)
     * @return List&lt;RestfulCaseOverviewV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulCaseOverviewV1> v5ContactsIdCasesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulCaseOverviewV1>> localVarResp = v5ContactsIdCasesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all cases for the contact given by its ID
     * @param id contact ID (required)
     * @return ApiResponse&lt;List&lt;RestfulCaseOverviewV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulCaseOverviewV1>> v5ContactsIdCasesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5ContactsIdCasesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all cases for the contact given by its ID
     * @param id contact ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdCasesGetAsync(java.lang.String id, final ApiCallback<List<RestfulCaseOverviewV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5ContactsIdCasesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulCaseOverviewV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5ContactsIdTagsGet
     * @param id contact ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdTagsGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/contacts/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5ContactsIdTagsGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5ContactsIdTagsGet(Async)");
        }

        return v5ContactsIdTagsGetCall(id, _callback);

    }

    /**
     * 
     * Returns all tags attached to the contact give by its ID
     * @param id contact ID (required)
     * @return List&lt;RestfulTagV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulTagV1> v5ContactsIdTagsGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulTagV1>> localVarResp = v5ContactsIdTagsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all tags attached to the contact give by its ID
     * @param id contact ID (required)
     * @return ApiResponse&lt;List&lt;RestfulTagV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulTagV1>> v5ContactsIdTagsGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5ContactsIdTagsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all tags attached to the contact give by its ID
     * @param id contact ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdTagsGetAsync(java.lang.String id, final ApiCallback<List<RestfulTagV1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5ContactsIdTagsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulTagV1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5ContactsIdTagsPut
     * @param id contact ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdTagsPutCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v5/contacts/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5ContactsIdTagsPutValidateBeforeCall(java.lang.String id, RestfulTagV1 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5ContactsIdTagsPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v5ContactsIdTagsPut(Async)");
        }

        return v5ContactsIdTagsPutCall(id, body, _callback);

    }

    /**
     * 
     * Creates a contact tag.
     * @param id contact ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5ContactsIdTagsPut(java.lang.String id, RestfulTagV1 body) throws ApiException {
        v5ContactsIdTagsPutWithHttpInfo(id, body);
    }

    /**
     * 
     * Creates a contact tag.
     * @param id contact ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5ContactsIdTagsPutWithHttpInfo(java.lang.String id, RestfulTagV1 body) throws ApiException {
        okhttp3.Call localVarCall = v5ContactsIdTagsPutValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a contact tag.
     * @param id contact ID (required)
     * @param body the tag to be added. its id may be empty. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsIdTagsPutAsync(java.lang.String id, RestfulTagV1 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5ContactsIdTagsPutValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v5ContactsTagsIdDelete
     * @param id tag ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsTagsIdDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v5/contacts/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v5ContactsTagsIdDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v5ContactsTagsIdDelete(Async)");
        }

        return v5ContactsTagsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a contacts tag given the tags ID.
     * @param id tag ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v5ContactsTagsIdDelete(java.lang.String id) throws ApiException {
        v5ContactsTagsIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a contacts tag given the tags ID.
     * @param id tag ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v5ContactsTagsIdDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v5ContactsTagsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a contacts tag given the tags ID.
     * @param id tag ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v5ContactsTagsIdDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v5ContactsTagsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6CasesDocumentIdContentbucketGet
     * @param id document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDocumentIdContentbucketGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/cases/document/{id}/contentbucket"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6CasesDocumentIdContentbucketGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v6CasesDocumentIdContentbucketGet(Async)");
        }

        return v6CasesDocumentIdContentbucketGetCall(id, _callback);

    }

    /**
     * 
     * Returns a documents content in the form of a data bucket, given its ID.The return value is Base64 encoded.
     * @param id document ID (required)
     * @return RestfulDataBucketV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDataBucketV6 v6CasesDocumentIdContentbucketGet(java.lang.String id) throws ApiException {
        ApiResponse<RestfulDataBucketV6> localVarResp = v6CasesDocumentIdContentbucketGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a documents content in the form of a data bucket, given its ID.The return value is Base64 encoded.
     * @param id document ID (required)
     * @return ApiResponse&lt;RestfulDataBucketV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDataBucketV6> v6CasesDocumentIdContentbucketGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v6CasesDocumentIdContentbucketGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RestfulDataBucketV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a documents content in the form of a data bucket, given its ID.The return value is Base64 encoded.
     * @param id document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDocumentIdContentbucketGetAsync(java.lang.String id, final ApiCallback<RestfulDataBucketV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6CasesDocumentIdContentbucketGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RestfulDataBucketV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6CasesDuedateCreatePut
     * @param body document data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDuedateCreatePutCall(RestfulDueDateV6 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/cases/duedate/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6CasesDuedateCreatePutValidateBeforeCall(RestfulDueDateV6 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6CasesDuedateCreatePut(Async)");
        }

        return v6CasesDuedateCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new due date within an existing case. An ID for the due date is not required in the request.
     * @param body document data (required)
     * @return RestfulDueDateV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDueDateV6 v6CasesDuedateCreatePut(RestfulDueDateV6 body) throws ApiException {
        ApiResponse<RestfulDueDateV6> localVarResp = v6CasesDuedateCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new due date within an existing case. An ID for the due date is not required in the request.
     * @param body document data (required)
     * @return ApiResponse&lt;RestfulDueDateV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDueDateV6> v6CasesDuedateCreatePutWithHttpInfo(RestfulDueDateV6 body) throws ApiException {
        okhttp3.Call localVarCall = v6CasesDuedateCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulDueDateV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new due date within an existing case. An ID for the due date is not required in the request.
     * @param body document data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDuedateCreatePutAsync(RestfulDueDateV6 body, final ApiCallback<RestfulDueDateV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6CasesDuedateCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDueDateV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6CasesDuedateUpdatePut
     * @param body the due dates new data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDuedateUpdatePutCall(RestfulDueDateV6 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/cases/duedate/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6CasesDuedateUpdatePutValidateBeforeCall(RestfulDueDateV6 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6CasesDuedateUpdatePut(Async)");
        }

        return v6CasesDuedateUpdatePutCall(body, _callback);

    }

    /**
     * 
     * Updates a due date.
     * @param body the due dates new data (required)
     * @return RestfulDueDateV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDueDateV6 v6CasesDuedateUpdatePut(RestfulDueDateV6 body) throws ApiException {
        ApiResponse<RestfulDueDateV6> localVarResp = v6CasesDuedateUpdatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a due date.
     * @param body the due dates new data (required)
     * @return ApiResponse&lt;RestfulDueDateV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDueDateV6> v6CasesDuedateUpdatePutWithHttpInfo(RestfulDueDateV6 body) throws ApiException {
        okhttp3.Call localVarCall = v6CasesDuedateUpdatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulDueDateV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a due date.
     * @param body the due dates new data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesDuedateUpdatePutAsync(RestfulDueDateV6 body, final ApiCallback<RestfulDueDateV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6CasesDuedateUpdatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDueDateV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6CasesIdHistoryPut
     * @param id case ID (required)
     * @param body the history entry to be added. its id and case id may be empty. its principalId is discarded when provided by the caller and automatically populated based on the API users authentication. Provide the date / time in UTC in a format like this: \&quot;2022-05-01T13:42:37Z[UTC]\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesIdHistoryPutCall(java.lang.String id, RestfulCaseHistoryV5 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/cases/{id}/history"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6CasesIdHistoryPutValidateBeforeCall(java.lang.String id, RestfulCaseHistoryV5 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v6CasesIdHistoryPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6CasesIdHistoryPut(Async)");
        }

        return v6CasesIdHistoryPutCall(id, body, _callback);

    }

    /**
     * 
     * Creates a history entry for a case.
     * @param id case ID (required)
     * @param body the history entry to be added. its id and case id may be empty. its principalId is discarded when provided by the caller and automatically populated based on the API users authentication. Provide the date / time in UTC in a format like this: \&quot;2022-05-01T13:42:37Z[UTC]\&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v6CasesIdHistoryPut(java.lang.String id, RestfulCaseHistoryV5 body) throws ApiException {
        v6CasesIdHistoryPutWithHttpInfo(id, body);
    }

    /**
     * 
     * Creates a history entry for a case.
     * @param id case ID (required)
     * @param body the history entry to be added. its id and case id may be empty. its principalId is discarded when provided by the caller and automatically populated based on the API users authentication. Provide the date / time in UTC in a format like this: \&quot;2022-05-01T13:42:37Z[UTC]\&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v6CasesIdHistoryPutWithHttpInfo(java.lang.String id, RestfulCaseHistoryV5 body) throws ApiException {
        okhttp3.Call localVarCall = v6CasesIdHistoryPutValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a history entry for a case.
     * @param id case ID (required)
     * @param body the history entry to be added. its id and case id may be empty. its principalId is discarded when provided by the caller and automatically populated based on the API users authentication. Provide the date / time in UTC in a format like this: \&quot;2022-05-01T13:42:37Z[UTC]\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6CasesIdHistoryPutAsync(java.lang.String id, RestfulCaseHistoryV5 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6CasesIdHistoryPutValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6DatabucketsNextPut
     * @param body the bucket formerly retrieved by the client, with an empty payload! (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6DatabucketsNextPutCall(RestfulDataBucketV6 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/databuckets/next";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6DatabucketsNextPutValidateBeforeCall(RestfulDataBucketV6 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6DatabucketsNextPut(Async)");
        }

        return v6DatabucketsNextPutCall(body, _callback);

    }

    /**
     * 
     * Returns a a documents content in the form of a data bucket, given its ID. The return value is Base64 encoded.
     * @param body the bucket formerly retrieved by the client, with an empty payload! (required)
     * @return RestfulDataBucketV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDataBucketV6 v6DatabucketsNextPut(RestfulDataBucketV6 body) throws ApiException {
        ApiResponse<RestfulDataBucketV6> localVarResp = v6DatabucketsNextPutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a a documents content in the form of a data bucket, given its ID. The return value is Base64 encoded.
     * @param body the bucket formerly retrieved by the client, with an empty payload! (required)
     * @return ApiResponse&lt;RestfulDataBucketV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDataBucketV6> v6DatabucketsNextPutWithHttpInfo(RestfulDataBucketV6 body) throws ApiException {
        okhttp3.Call localVarCall = v6DatabucketsNextPutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulDataBucketV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a a documents content in the form of a data bucket, given its ID. The return value is Base64 encoded.
     * @param body the bucket formerly retrieved by the client, with an empty payload! (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6DatabucketsNextPutAsync(RestfulDataBucketV6 body, final ApiCallback<RestfulDataBucketV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6DatabucketsNextPutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDataBucketV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6SecurityUsersByexternalidExtIdGet
     * @param extId the users external ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersByexternalidExtIdGetCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/security/users/byexternalid/{extId}"
            .replace("{" + "extId" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6SecurityUsersByexternalidExtIdGetValidateBeforeCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling v6SecurityUsersByexternalidExtIdGet(Async)");
        }

        return v6SecurityUsersByexternalidExtIdGetCall(extId, _callback);

    }

    /**
     * 
     * Returns a users metadata given its external ID
     * @param extId the users external ID (required)
     * @return RestfulUserV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulUserV6 v6SecurityUsersByexternalidExtIdGet(java.lang.String extId) throws ApiException {
        ApiResponse<RestfulUserV6> localVarResp = v6SecurityUsersByexternalidExtIdGetWithHttpInfo(extId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a users metadata given its external ID
     * @param extId the users external ID (required)
     * @return ApiResponse&lt;RestfulUserV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulUserV6> v6SecurityUsersByexternalidExtIdGetWithHttpInfo(java.lang.String extId) throws ApiException {
        okhttp3.Call localVarCall = v6SecurityUsersByexternalidExtIdGetValidateBeforeCall(extId, null);
        Type localVarReturnType = new TypeToken<RestfulUserV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a users metadata given its external ID
     * @param extId the users external ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersByexternalidExtIdGetAsync(java.lang.String extId, final ApiCallback<RestfulUserV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6SecurityUsersByexternalidExtIdGetValidateBeforeCall(extId, _callback);
        Type localVarReturnType = new TypeToken<RestfulUserV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6SecurityUsersCreatePut
     * @param body user data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersCreatePutCall(RestfulUserV6 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/security/users/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6SecurityUsersCreatePutValidateBeforeCall(RestfulUserV6 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6SecurityUsersCreatePut(Async)");
        }

        return v6SecurityUsersCreatePutCall(body, _callback);

    }

    /**
     * 
     * Creates a new user. No permissions will be granted. Does currently not support all attributes.
     * @param body user data (required)
     * @return RestfulUserV6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulUserV6 v6SecurityUsersCreatePut(RestfulUserV6 body) throws ApiException {
        ApiResponse<RestfulUserV6> localVarResp = v6SecurityUsersCreatePutWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new user. No permissions will be granted. Does currently not support all attributes.
     * @param body user data (required)
     * @return ApiResponse&lt;RestfulUserV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulUserV6> v6SecurityUsersCreatePutWithHttpInfo(RestfulUserV6 body) throws ApiException {
        okhttp3.Call localVarCall = v6SecurityUsersCreatePutValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestfulUserV6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new user. No permissions will be granted. Does currently not support all attributes.
     * @param body user data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersCreatePutAsync(RestfulUserV6 body, final ApiCallback<RestfulUserV6> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6SecurityUsersCreatePutValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestfulUserV6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6SecurityUsersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/security/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6SecurityUsersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v6SecurityUsersGetCall(_callback);

    }

    /**
     * 
     * Returns all user available in the system who have at least the permission to log in
     * @return List&lt;RestfulUserV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulUserV6> v6SecurityUsersGet() throws ApiException {
        ApiResponse<List<RestfulUserV6>> localVarResp = v6SecurityUsersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all user available in the system who have at least the permission to log in
     * @return ApiResponse&lt;List&lt;RestfulUserV6&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulUserV6>> v6SecurityUsersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v6SecurityUsersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulUserV6>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all user available in the system who have at least the permission to log in
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersGetAsync(final ApiCallback<List<RestfulUserV6>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6SecurityUsersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulUserV6>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6SecurityUsersListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/security/users/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6SecurityUsersListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v6SecurityUsersListGetCall(_callback);

    }

    /**
     * 
     * Lists all users, including ones without login permission
     * @return List&lt;RestfulUserV6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulUserV6> v6SecurityUsersListGet() throws ApiException {
        ApiResponse<List<RestfulUserV6>> localVarResp = v6SecurityUsersListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all users, including ones without login permission
     * @return ApiResponse&lt;List&lt;RestfulUserV6&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulUserV6>> v6SecurityUsersListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v6SecurityUsersListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestfulUserV6>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all users, including ones without login permission
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6SecurityUsersListGetAsync(final ApiCallback<List<RestfulUserV6>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6SecurityUsersListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestfulUserV6>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6TemplatesDocumentsFolderGet
     * @param folder the folder hierarchy starting with / (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderGetCall(java.lang.String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/templates/documents/{folder}"
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6TemplatesDocumentsFolderGetValidateBeforeCall(java.lang.String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling v6TemplatesDocumentsFolderGet(Async)");
        }

        return v6TemplatesDocumentsFolderGetCall(folder, _callback);

    }

    /**
     * 
     * Returns all document templates in the given folder.
     * @param folder the folder hierarchy starting with / (required)
     * @return List&lt;java.lang.String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<java.lang.String> v6TemplatesDocumentsFolderGet(java.lang.String folder) throws ApiException {
        ApiResponse<List<java.lang.String>> localVarResp = v6TemplatesDocumentsFolderGetWithHttpInfo(folder);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all document templates in the given folder.
     * @param folder the folder hierarchy starting with / (required)
     * @return ApiResponse&lt;List&lt;java.lang.String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<java.lang.String>> v6TemplatesDocumentsFolderGetWithHttpInfo(java.lang.String folder) throws ApiException {
        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderGetValidateBeforeCall(folder, null);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all document templates in the given folder.
     * @param folder the folder hierarchy starting with / (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderGetAsync(java.lang.String folder, final ApiCallback<List<java.lang.String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderGetValidateBeforeCall(folder, _callback);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut
     * @param caseId the id of the case (required)
     * @param fileName file name of the document to be created, without file extension (server will enforce same extension as template) (required)
     * @param folder the template folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param body key-value pairs holding placeholder values, used for overriding defaults / existing values (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutCall(java.lang.String caseId, java.lang.String fileName, java.lang.String folder, java.lang.String template, List<RestfulPlaceholderV6> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/templates/documents/{folder}/{template}/{caseId}/{fileName}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
            .replace("{" + "fileName" + "}", localVarApiClient.escapeString(fileName.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()))
            .replace("{" + "template" + "}", localVarApiClient.escapeString(template.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutValidateBeforeCall(java.lang.String caseId, java.lang.String fileName, java.lang.String folder, java.lang.String template, List<RestfulPlaceholderV6> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(Async)");
        }

        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(Async)");
        }

        return v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutCall(caseId, fileName, folder, template, body, _callback);

    }

    /**
     * 
     * Creates a new document based on a template.Any place holders are automatically populated, but a client may override them. Invoice creation not supported.
     * @param caseId the id of the case (required)
     * @param fileName file name of the document to be created, without file extension (server will enforce same extension as template) (required)
     * @param folder the template folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param body key-value pairs holding placeholder values, used for overriding defaults / existing values (required)
     * @return RestfulDocumentV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDocumentV1 v6TemplatesDocumentsFolderTemplateCaseIdFileNamePut(java.lang.String caseId, java.lang.String fileName, java.lang.String folder, java.lang.String template, List<RestfulPlaceholderV6> body) throws ApiException {
        ApiResponse<RestfulDocumentV1> localVarResp = v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutWithHttpInfo(caseId, fileName, folder, template, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new document based on a template.Any place holders are automatically populated, but a client may override them. Invoice creation not supported.
     * @param caseId the id of the case (required)
     * @param fileName file name of the document to be created, without file extension (server will enforce same extension as template) (required)
     * @param folder the template folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param body key-value pairs holding placeholder values, used for overriding defaults / existing values (required)
     * @return ApiResponse&lt;RestfulDocumentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDocumentV1> v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutWithHttpInfo(java.lang.String caseId, java.lang.String fileName, java.lang.String folder, java.lang.String template, List<RestfulPlaceholderV6> body) throws ApiException {
        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutValidateBeforeCall(caseId, fileName, folder, template, body, null);
        Type localVarReturnType = new TypeToken<RestfulDocumentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new document based on a template.Any place holders are automatically populated, but a client may override them. Invoice creation not supported.
     * @param caseId the id of the case (required)
     * @param fileName file name of the document to be created, without file extension (server will enforce same extension as template) (required)
     * @param folder the template folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param body key-value pairs holding placeholder values, used for overriding defaults / existing values (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutAsync(java.lang.String caseId, java.lang.String fileName, java.lang.String folder, java.lang.String template, List<RestfulPlaceholderV6> body, final ApiCallback<RestfulDocumentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderTemplateCaseIdFileNamePutValidateBeforeCall(caseId, fileName, folder, template, body, _callback);
        Type localVarReturnType = new TypeToken<RestfulDocumentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6TemplatesDocumentsFolderTemplateCaseIdGet
     * @param caseId the id of the case (required)
     * @param folder the folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdGetCall(java.lang.String caseId, java.lang.String folder, java.lang.String template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/templates/documents/{folder}/{template}/{caseId}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()))
            .replace("{" + "template" + "}", localVarApiClient.escapeString(template.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdGetValidateBeforeCall(java.lang.String caseId, java.lang.String folder, java.lang.String template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v6TemplatesDocumentsFolderTemplateCaseIdGet(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling v6TemplatesDocumentsFolderTemplateCaseIdGet(Async)");
        }

        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling v6TemplatesDocumentsFolderTemplateCaseIdGet(Async)");
        }

        return v6TemplatesDocumentsFolderTemplateCaseIdGetCall(caseId, folder, template, _callback);

    }

    /**
     * 
     * Returns all placeholders keys for a given template in a given folder, using the given case. Case is needed to resolve potential forms placeholders (AKA Falldaten).
     * @param caseId the id of the case (required)
     * @param folder the folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @return java.lang.String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public java.lang.String v6TemplatesDocumentsFolderTemplateCaseIdGet(java.lang.String caseId, java.lang.String folder, java.lang.String template) throws ApiException {
        ApiResponse<java.lang.String> localVarResp = v6TemplatesDocumentsFolderTemplateCaseIdGetWithHttpInfo(caseId, folder, template);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all placeholders keys for a given template in a given folder, using the given case. Case is needed to resolve potential forms placeholders (AKA Falldaten).
     * @param caseId the id of the case (required)
     * @param folder the folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @return ApiResponse&lt;java.lang.String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.lang.String> v6TemplatesDocumentsFolderTemplateCaseIdGetWithHttpInfo(java.lang.String caseId, java.lang.String folder, java.lang.String template) throws ApiException {
        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderTemplateCaseIdGetValidateBeforeCall(caseId, folder, template, null);
        Type localVarReturnType = new TypeToken<java.lang.String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all placeholders keys for a given template in a given folder, using the given case. Case is needed to resolve potential forms placeholders (AKA Falldaten).
     * @param caseId the id of the case (required)
     * @param folder the folder hierarchy starting with / (required)
     * @param template the file name of the template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFolderTemplateCaseIdGetAsync(java.lang.String caseId, java.lang.String folder, java.lang.String template, final ApiCallback<java.lang.String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6TemplatesDocumentsFolderTemplateCaseIdGetValidateBeforeCall(caseId, folder, template, _callback);
        Type localVarReturnType = new TypeToken<java.lang.String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v6TemplatesDocumentsFoldersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFoldersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/templates/documents/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v6TemplatesDocumentsFoldersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v6TemplatesDocumentsFoldersGetCall(_callback);

    }

    /**
     * 
     * Returns the folder structure holding document templates.
     * @return List&lt;java.lang.String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<java.lang.String> v6TemplatesDocumentsFoldersGet() throws ApiException {
        ApiResponse<List<java.lang.String>> localVarResp = v6TemplatesDocumentsFoldersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the folder structure holding document templates.
     * @return ApiResponse&lt;List&lt;java.lang.String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<java.lang.String>> v6TemplatesDocumentsFoldersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v6TemplatesDocumentsFoldersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the folder structure holding document templates.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v6TemplatesDocumentsFoldersGetAsync(final ApiCallback<List<java.lang.String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v6TemplatesDocumentsFoldersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7CasesByexternalidExtIdGet
     * @param extId the cases external ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesByexternalidExtIdGetCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/cases/byexternalid/{extId}"
            .replace("{" + "extId" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7CasesByexternalidExtIdGetValidateBeforeCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling v7CasesByexternalidExtIdGet(Async)");
        }

        return v7CasesByexternalidExtIdGetCall(extId, _callback);

    }

    /**
     * 
     * Returns a cases metadata given its external ID
     * @param extId the cases external ID (required)
     * @return RestfulCaseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulCaseV2 v7CasesByexternalidExtIdGet(java.lang.String extId) throws ApiException {
        ApiResponse<RestfulCaseV2> localVarResp = v7CasesByexternalidExtIdGetWithHttpInfo(extId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a cases metadata given its external ID
     * @param extId the cases external ID (required)
     * @return ApiResponse&lt;RestfulCaseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulCaseV2> v7CasesByexternalidExtIdGetWithHttpInfo(java.lang.String extId) throws ApiException {
        okhttp3.Call localVarCall = v7CasesByexternalidExtIdGetValidateBeforeCall(extId, null);
        Type localVarReturnType = new TypeToken<RestfulCaseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a cases metadata given its external ID
     * @param extId the cases external ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesByexternalidExtIdGetAsync(java.lang.String extId, final ApiCallback<RestfulCaseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7CasesByexternalidExtIdGetValidateBeforeCall(extId, _callback);
        Type localVarReturnType = new TypeToken<RestfulCaseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7CasesDocumentByexternalidExtIdGet
     * @param extId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesDocumentByexternalidExtIdGetCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/cases/document/byexternalid/{extId}"
            .replace("{" + "extId" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7CasesDocumentByexternalidExtIdGetValidateBeforeCall(java.lang.String extId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling v7CasesDocumentByexternalidExtIdGet(Async)");
        }

        return v7CasesDocumentByexternalidExtIdGetCall(extId, _callback);

    }

    /**
     * 
     * 
     * @param extId  (required)
     * @return RestfulDocumentV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulDocumentV1 v7CasesDocumentByexternalidExtIdGet(java.lang.String extId) throws ApiException {
        ApiResponse<RestfulDocumentV1> localVarResp = v7CasesDocumentByexternalidExtIdGetWithHttpInfo(extId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param extId  (required)
     * @return ApiResponse&lt;RestfulDocumentV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulDocumentV1> v7CasesDocumentByexternalidExtIdGetWithHttpInfo(java.lang.String extId) throws ApiException {
        okhttp3.Call localVarCall = v7CasesDocumentByexternalidExtIdGetValidateBeforeCall(extId, null);
        Type localVarReturnType = new TypeToken<RestfulDocumentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param extId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesDocumentByexternalidExtIdGetAsync(java.lang.String extId, final ApiCallback<RestfulDocumentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7CasesDocumentByexternalidExtIdGetValidateBeforeCall(extId, _callback);
        Type localVarReturnType = new TypeToken<RestfulDocumentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7CasesIdDocumentsValidatePut
     * @param id case ID (required)
     * @param body the request object describing a document to be added to the case (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesIdDocumentsValidatePutCall(java.lang.String id, RestfulDocumentValidationRequestV7 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v7/cases/{id}/documents/validate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7CasesIdDocumentsValidatePutValidateBeforeCall(java.lang.String id, RestfulDocumentValidationRequestV7 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v7CasesIdDocumentsValidatePut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v7CasesIdDocumentsValidatePut(Async)");
        }

        return v7CasesIdDocumentsValidatePutCall(id, body, _callback);

    }

    /**
     * 
     * Checks whether or not a document (as specified in the request) may currently be added to the given case. Note that a client should then add the document directly after performing the check, otherwise there may be other clients who add same-named documents in the meantime. Checks are performed in a case-insensitive manner, even if some operating systems allow that.
     * @param id case ID (required)
     * @param body the request object describing a document to be added to the case (required)
     * @return RestfulStatusResponseV7
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RestfulStatusResponseV7 v7CasesIdDocumentsValidatePut(java.lang.String id, RestfulDocumentValidationRequestV7 body) throws ApiException {
        ApiResponse<RestfulStatusResponseV7> localVarResp = v7CasesIdDocumentsValidatePutWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether or not a document (as specified in the request) may currently be added to the given case. Note that a client should then add the document directly after performing the check, otherwise there may be other clients who add same-named documents in the meantime. Checks are performed in a case-insensitive manner, even if some operating systems allow that.
     * @param id case ID (required)
     * @param body the request object describing a document to be added to the case (required)
     * @return ApiResponse&lt;RestfulStatusResponseV7&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestfulStatusResponseV7> v7CasesIdDocumentsValidatePutWithHttpInfo(java.lang.String id, RestfulDocumentValidationRequestV7 body) throws ApiException {
        okhttp3.Call localVarCall = v7CasesIdDocumentsValidatePutValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<RestfulStatusResponseV7>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether or not a document (as specified in the request) may currently be added to the given case. Note that a client should then add the document directly after performing the check, otherwise there may be other clients who add same-named documents in the meantime. Checks are performed in a case-insensitive manner, even if some operating systems allow that.
     * @param id case ID (required)
     * @param body the request object describing a document to be added to the case (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesIdDocumentsValidatePutAsync(java.lang.String id, RestfulDocumentValidationRequestV7 body, final ApiCallback<RestfulStatusResponseV7> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7CasesIdDocumentsValidatePutValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<RestfulStatusResponseV7>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7CasesIdMessagesGet
     * @param id case ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesIdMessagesGetCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/cases/{id}/messages"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7CasesIdMessagesGetValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v7CasesIdMessagesGet(Async)");
        }

        return v7CasesIdMessagesGetCall(id, _callback);

    }

    /**
     * 
     * Returns a list of instant messages for a given case
     * @param id case ID (required)
     * @return List&lt;RestfulInstantMessageV7&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulInstantMessageV7> v7CasesIdMessagesGet(java.lang.String id) throws ApiException {
        ApiResponse<List<RestfulInstantMessageV7>> localVarResp = v7CasesIdMessagesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of instant messages for a given case
     * @param id case ID (required)
     * @return ApiResponse&lt;List&lt;RestfulInstantMessageV7&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulInstantMessageV7>> v7CasesIdMessagesGetWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v7CasesIdMessagesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<RestfulInstantMessageV7>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of instant messages for a given case
     * @param id case ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7CasesIdMessagesGetAsync(java.lang.String id, final ApiCallback<List<RestfulInstantMessageV7>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7CasesIdMessagesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulInstantMessageV7>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7ConfigurationOptiongroupsListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7ConfigurationOptiongroupsListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/configuration/optiongroups/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7ConfigurationOptiongroupsListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v7ConfigurationOptiongroupsListGetCall(_callback);

    }

    /**
     * 
     * Returns all option groups available in the system who have at least one value configured.Some important option groups are:    address.country: all countries    address.degreeprefix: all degrees appearing before the name    address.degreesuffix: all degrees appearing after the name    address.profession: all professions    address.role: all roles, such as \&quot;CEO\&quot; etc. archiveFile.subjectField: all subject fields for cases    address.salutation:     archiveFile.tags: all tags that can be attached to a case    address.tags: all tags that can be attached to an address    document.tags: all tags that can be attached to a document    address.title:     archiveFile.reviewReason: all descriptions of calendar entries    timesheet.intervalminutes: all intervals usable for timesheets, in minutes    address.titleinaddress:     address.complimentaryclose:     address.legalform: all types of legal entities    address.nationality: all nationalities    invoice.currency: all currencies    invoice.taxrates: all tax rates as decimal numbers
     * @return List&lt;java.lang.String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<java.lang.String> v7ConfigurationOptiongroupsListGet() throws ApiException {
        ApiResponse<List<java.lang.String>> localVarResp = v7ConfigurationOptiongroupsListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all option groups available in the system who have at least one value configured.Some important option groups are:    address.country: all countries    address.degreeprefix: all degrees appearing before the name    address.degreesuffix: all degrees appearing after the name    address.profession: all professions    address.role: all roles, such as \&quot;CEO\&quot; etc. archiveFile.subjectField: all subject fields for cases    address.salutation:     archiveFile.tags: all tags that can be attached to a case    address.tags: all tags that can be attached to an address    document.tags: all tags that can be attached to a document    address.title:     archiveFile.reviewReason: all descriptions of calendar entries    timesheet.intervalminutes: all intervals usable for timesheets, in minutes    address.titleinaddress:     address.complimentaryclose:     address.legalform: all types of legal entities    address.nationality: all nationalities    invoice.currency: all currencies    invoice.taxrates: all tax rates as decimal numbers
     * @return ApiResponse&lt;List&lt;java.lang.String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<java.lang.String>> v7ConfigurationOptiongroupsListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v7ConfigurationOptiongroupsListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all option groups available in the system who have at least one value configured.Some important option groups are:    address.country: all countries    address.degreeprefix: all degrees appearing before the name    address.degreesuffix: all degrees appearing after the name    address.profession: all professions    address.role: all roles, such as \&quot;CEO\&quot; etc. archiveFile.subjectField: all subject fields for cases    address.salutation:     archiveFile.tags: all tags that can be attached to a case    address.tags: all tags that can be attached to an address    document.tags: all tags that can be attached to a document    address.title:     archiveFile.reviewReason: all descriptions of calendar entries    timesheet.intervalminutes: all intervals usable for timesheets, in minutes    address.titleinaddress:     address.complimentaryclose:     address.legalform: all types of legal entities    address.nationality: all nationalities    invoice.currency: all currencies    invoice.taxrates: all tax rates as decimal numbers
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7ConfigurationOptiongroupsListGetAsync(final ApiCallback<List<java.lang.String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7ConfigurationOptiongroupsListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<java.lang.String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7ConfigurationOptiongroupsOptiongroupGet
     * @param optiongroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7ConfigurationOptiongroupsOptiongroupGetCall(java.lang.String optiongroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/configuration/optiongroups/{optiongroup}"
            .replace("{" + "optiongroup" + "}", localVarApiClient.escapeString(optiongroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7ConfigurationOptiongroupsOptiongroupGetValidateBeforeCall(java.lang.String optiongroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'optiongroup' is set
        if (optiongroup == null) {
            throw new ApiException("Missing the required parameter 'optiongroup' when calling v7ConfigurationOptiongroupsOptiongroupGet(Async)");
        }

        return v7ConfigurationOptiongroupsOptiongroupGetCall(optiongroup, _callback);

    }

    /**
     * 
     * Returns all options for an option group.
     * @param optiongroup  (required)
     * @return List&lt;RestfulOptionV7&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RestfulOptionV7> v7ConfigurationOptiongroupsOptiongroupGet(java.lang.String optiongroup) throws ApiException {
        ApiResponse<List<RestfulOptionV7>> localVarResp = v7ConfigurationOptiongroupsOptiongroupGetWithHttpInfo(optiongroup);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all options for an option group.
     * @param optiongroup  (required)
     * @return ApiResponse&lt;List&lt;RestfulOptionV7&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestfulOptionV7>> v7ConfigurationOptiongroupsOptiongroupGetWithHttpInfo(java.lang.String optiongroup) throws ApiException {
        okhttp3.Call localVarCall = v7ConfigurationOptiongroupsOptiongroupGetValidateBeforeCall(optiongroup, null);
        Type localVarReturnType = new TypeToken<List<RestfulOptionV7>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all options for an option group.
     * @param optiongroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7ConfigurationOptiongroupsOptiongroupGetAsync(java.lang.String optiongroup, final ApiCallback<List<RestfulOptionV7>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7ConfigurationOptiongroupsOptiongroupGetValidateBeforeCall(optiongroup, _callback);
        Type localVarReturnType = new TypeToken<List<RestfulOptionV7>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7MessagesIdDeleteDelete
     * @param id message ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7MessagesIdDeleteDeleteCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v7/messages/{id}/delete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7MessagesIdDeleteDeleteValidateBeforeCall(java.lang.String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v7MessagesIdDeleteDelete(Async)");
        }

        return v7MessagesIdDeleteDeleteCall(id, _callback);

    }

    /**
     * 
     * Deletes a message based on its ID
     * @param id message ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v7MessagesIdDeleteDelete(java.lang.String id) throws ApiException {
        v7MessagesIdDeleteDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a message based on its ID
     * @param id message ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v7MessagesIdDeleteDeleteWithHttpInfo(java.lang.String id) throws ApiException {
        okhttp3.Call localVarCall = v7MessagesIdDeleteDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a message based on its ID
     * @param id message ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7MessagesIdDeleteDeleteAsync(java.lang.String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7MessagesIdDeleteDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v7MessagesSubmitPut
     * @param body message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7MessagesSubmitPutCall(RestfulInstantMessageV7 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v7/messages/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v7MessagesSubmitPutValidateBeforeCall(RestfulInstantMessageV7 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v7MessagesSubmitPut(Async)");
        }

        return v7MessagesSubmitPutCall(body, _callback);

    }

    /**
     * 
     * Submits a new message. An API client should not provide mentions along with the message, they will be automatically extracted based on the content of the message.
     * @param body message (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void v7MessagesSubmitPut(RestfulInstantMessageV7 body) throws ApiException {
        v7MessagesSubmitPutWithHttpInfo(body);
    }

    /**
     * 
     * Submits a new message. An API client should not provide mentions along with the message, they will be automatically extracted based on the content of the message.
     * @param body message (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v7MessagesSubmitPutWithHttpInfo(RestfulInstantMessageV7 body) throws ApiException {
        okhttp3.Call localVarCall = v7MessagesSubmitPutValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Submits a new message. An API client should not provide mentions along with the message, they will be automatically extracted based on the content of the message.
     * @param body message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authenticated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v7MessagesSubmitPutAsync(RestfulInstantMessageV7 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v7MessagesSubmitPutValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
