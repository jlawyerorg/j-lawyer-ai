name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Build with Maven
      run: mvn clean package

    - name: Find WAR File
      id: find_war
      run: echo "::set-output name=filename::$(find ./target -name '*.war' -printf '%f')"

    - name: Get Release ID
      id: get_release_id
      run: |
        release_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases")
        release_id=$(echo "$release_info" | jq -r '.[0].id')
        echo "Release ID: $release_id"
        echo "::set-output name=release_id::$release_id"

    - name: Debug Asset Upload
      run: |
        echo "Asset Path: ./target/${{ steps.find_war.outputs.filename }}"
        echo "Asset Name: ${{ steps.find_war.outputs.filename }}"
        echo "Release ID: ${{ steps.get_release_id.outputs.release_id }}"

    - name: Upload Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.release_id }}/assets
        # build is created as e.g. /home/runner/work/j-lawyer-ai/j-lawyer-ai/target/j-lawyer-ai-0.0.1-SNAPSHOT.war
        asset_path: ./target/${{ steps.find_war.outputs.filename }}
        # asset_path: /home/runner/work/j-lawyer-ai/j-lawyer-ai/target/${{ steps.find_war.outputs.filename }}
        
        asset_name: ${{ steps.find_war.outputs.filename }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}